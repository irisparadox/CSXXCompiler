package syntax;

import java_cup.runtime.*;
import lex.AnalizadorLexicoTiny;
import lex.UnidadLexica;
import lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.ArrayList;
import java.util.LinkedList;

scan with {: return getScanner().next_token(); :};
//action code {:
//   ... add some code to declare and initialize e.g. variables used by the code embedded in the grammar
//:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};

terminal OPERATOR_ADD;
terminal OPERATOR_SUB;
terminal OPERATOR_MULT;
terminal OPERATOR_DIV;
terminal OPERATOR_AND;
terminal OPERATOR_OR;
terminal OPERATOR_XOR;
terminal OPERATOR_NOT;
terminal OPERATOR_MOD;

terminal OPERATOR_BAND;
terminal OPERATOR_BOR;
terminal OPERATOR_BNOT;
terminal OPERATOR_EQUAL;
terminal OPERATOR_NEQ;
terminal OPERATOR_GT;
terminal OPERATOR_LT;
terminal OPERATOR_GEQ;
terminal OPERATOR_LEQ;

terminal OPERATOR_PP;
terminal OPERATOR_MM;

terminal EQUALS;
terminal COMA;
terminal SEMI_COLON;
terminal DOT;
terminal TYPE_IDENT;

terminal PARENTH_OPEN;
terminal PARENTH_CLOSE;
terminal BRACKET_OPEN;
terminal BRACKET_CLOSE;
terminal CURLY_OPEN;
terminal CURLY_CLOSE;

terminal VOID;
terminal TokenValue IDENTIFICATOR;
terminal TokenValue NUMBER_NAT;
terminal TokenValue NUMBER_INT;
terminal TokenValue NUMBER_FLOAT;
terminal TokenValue NUMBER_BIN;
terminal TokenValue NUMBER_HEX;
terminal TokenValue RVAL_CHAR;
terminal TokenValue RVAL_CHAR_ARR;

terminal UINT8;
terminal UINT16;
terminal UINT32;
terminal UINT64;

terminal INT8;
terminal INT16;
terminal INT32;
terminal INT64;

terminal FLOAT32;
terminal FLOAT64;

terminal BOOL;
terminal TokenValue TRUE_;
terminal TokenValue FALSE_;

terminal CHAR;
terminal UCHAR;

terminal STRUCT;

terminal IF;
terminal ELSEIF;
terminal ELSE1;
terminal ELSE2;

terminal WHILE;
terminal FOR;
terminal LOOP;
terminal CURSOR;
terminal FUNCTION;

non terminal ArrayList<Instruction> S, INSTRUCTION_OR_FUNCTION;
non terminal ArrayList<Instruction> INSTRUCTIONS;
non terminal Instruction INSTRUCTION, SCOPE;
non terminal _FUNCTION;
non terminal DECLARATIONS, F_PARAMETERS, MORE_F_PARAMETERS, F_PARAMETER, F_ARGUMENTS, MORE_F_ARGUMENTS, F_ARGUMENT;
non terminal Instruction  ASSIGNATION, DECLARATION;
non terminal Instruction Sif0, Sif1, Sif2 ;
non terminal Instruction WHILE_LOOP, FOR_LOOP;
non terminal Instruction TYPEDEC, STRUCTDEC, ARRDEC, F_HEADER, F_BODY, F_CALL;
non terminal E EXP0, EXP1, EXP2, EXP3, EXP4, EXP5, EXP6, EXP7, ARRASSIGN;
non terminal LinkedList<E> ARRAY_ACCESS;
non terminal Num VALUE;
non terminal Types TYPES;
non terminal LinkedList<E> ARRCONTENTS, MORE_ARRCONTENTS;

S ::= INSTRUCTION_OR_FUNCTION: Val_Is
      {: RESULT = Val_Is; :};

INSTRUCTION_OR_FUNCTION ::= INSTRUCTION: Val_I
                            {: ArrayList<Instruction> instrs = new ArrayList<Instruction>();
                               instrs.add(Val_I);
                               RESULT = instrs;
                            :};
INSTRUCTION_OR_FUNCTION ::= SCOPE: Val_Scope
                            {: ArrayList<Instruction> instrs = new ArrayList<Instruction>();
                               instrs.add(Val_Scope);
                               RESULT = instrs;
                            :};
// INSTRUCTION_OR_FUNCTION ::= _FUNCTION | _FUNCTION INSTRUCTION_OR_FUNCTION ;
INSTRUCTION_OR_FUNCTION ::= INSTRUCTION_OR_FUNCTION: Val_Is INSTRUCTION: Val_I 
                            {:
                               Val_Is.add(Val_I);
                               RESULT = Val_Is;
                            :};
INSTRUCTION_OR_FUNCTION ::= INSTRUCTION_OR_FUNCTION: Val_Is SCOPE: Val_Scope
                            {:
                               Val_Is.add(Val_Scope);
                               RESULT = Val_Is;
                            :};

SCOPE ::= CURLY_OPEN INSTRUCTION_OR_FUNCTION: Val_Is CURLY_CLOSE
          {:
             InstructionBlock block = new InstructionBlock(Val_Is);
             RESULT = block;
          :};
SCOPE ::= CURLY_OPEN CURLY_CLOSE
          {: RESULT = new EmptyScope(); :};

INSTRUCTIONS ::= INSTRUCTIONS: Val_Is INSTRUCTION: Val_I 
                 {: 
                    Val_Is.add(Val_I);
                    RESULT = Val_Is;
                 :};
INSTRUCTIONS ::= INSTRUCTION: Val_I
                 {: 
                    ArrayList<Instruction> instrs = new ArrayList<Instruction>();
                    instrs.add(Val_I);
                    RESULT = instrs;
                 :};
INSTRUCTION ::= WHILE_LOOP: Val_I
                {: RESULT = Val_I; :};
INSTRUCTION ::= FOR_LOOP: Val_I
                {: RESULT = Val_I; :};
INSTRUCTION ::= DECLARATION: Val_I SEMI_COLON
                {: RESULT = Val_I; :};
// INSTRUCTION ::= F_CALL SEMI_COLON ;
INSTRUCTION ::= Sif0: Val_I
                {:RESULT = Val_I; :};
INSTRUCTION ::= ASSIGNATION: Val_A SEMI_COLON
                {: RESULT = Val_A; :};
INSTRUCTION ::= EXP0: Val_Exp SEMI_COLON
                {:RESULT = new FloatingExpression(Val_Exp); :};


Sif0 ::= IF PARENTH_OPEN EXP0: Val_Exp PARENTH_CLOSE CURLY_OPEN INSTRUCTIONS: Val_Is CURLY_CLOSE Sif1: Val_Elseif
         {: RESULT = new If(Val_Exp, Val_Elseif, Val_Is); :};
Sif1 ::= Sif2: Val_Else
         {: RESULT = Val_Else; :};
Sif1 ::= ELSEIF PARENTH_OPEN EXP0: Val_Exp PARENTH_CLOSE CURLY_OPEN INSTRUCTIONS: Val_Is CURLY_CLOSE Sif1: Val_Elseif
         {: RESULT = new If(Val_Exp, Val_Elseif, Val_Is); :};
Sif2 ::= /* EPSILON */
         {: RESULT = new Empty(); :};
Sif2 ::= ELSE1 ELSE2 CURLY_OPEN INSTRUCTIONS: Val_Is CURLY_CLOSE
         {: RESULT = new Else(Val_Is); :};

WHILE_LOOP ::= WHILE PARENTH_OPEN EXP0: Val_Exp PARENTH_CLOSE CURLY_OPEN INSTRUCTIONS: Val_Is CURLY_CLOSE
               {: RESULT = new While(Val_Exp, Val_Is); :};
FOR_LOOP   ::= FOR PARENTH_OPEN EXP0: Val_Exp1 SEMI_COLON EXP0: Val_Exp2 PARENTH_CLOSE CURLY_OPEN INSTRUCTIONS: Val_Is CURLY_CLOSE
               {: RESULT = new For(Val_Exp1, Val_Exp2, Val_Is); :};

_FUNCTION ::= F_BODY | F_HEADER ;

F_PARAMETERS      ::= F_PARAMETER MORE_F_PARAMETERS | /* EPSILON */ ;
MORE_F_PARAMETERS ::= COMA F_PARAMETER MORE_F_PARAMETERS | /* EPSILON */ ;
F_PARAMETER       ::= DECLARATION ;

F_ARGUMENTS       ::= F_ARGUMENT MORE_F_ARGUMENTS | /* EPSILON */ ;
MORE_F_ARGUMENTS  ::= COMA F_ARGUMENT MORE_F_ARGUMENTS | /* EPSILON */ ;
F_ARGUMENT        ::= IDENTIFICATOR ;

DECLARATIONS ::= DECLARATIONS DECLARATION SEMI_COLON | DECLARATION SEMI_COLON ;
DECLARATION  ::= TYPEDEC: Val_I
                 {: RESULT = Val_I; :};
                 
DECLARATION  ::= ARRDEC: Val_I
                 {: RESULT = Val_I; :};
ASSIGNATION  ::= IDENTIFICATOR: Val_ID EQUALS EXP0: Val_EXP
                 {: RESULT = new Assignation(Val_ID.lexema, Val_EXP); :};

TYPEDEC   ::= TYPES: Val_Type IDENTIFICATOR: Val_ID
              {: RESULT = new DeclarationUnassigned(Val_ID.lexema, Val_Type); :};
TYPEDEC   ::= TYPES: Val_Type IDENTIFICATOR: Val_ID EQUALS EXP0: Val_EXP
              {: RESULT = new Declaration(Val_ID.lexema, Val_Type, Val_EXP); :};
STRUCTDEC ::= STRUCT IDENTIFICATOR | STRUCT IDENTIFICATOR BRACKET_OPEN BRACKET_CLOSE | STRUCT IDENTIFICATOR BRACKET_OPEN DECLARATIONS BRACKET_CLOSE ;
ARRDEC    ::= TYPES: Val_Type ARRAY_ACCESS: Val_Access IDENTIFICATOR: Val_ID
              {: RESULT = new ArrayDeclarationUnassigned(Val_ID.lexema, Val_Type, Val_Access); :};
ARRDEC    ::= TYPES: Val_Type ARRAY_ACCESS: Val_Access IDENTIFICATOR: Val_ID EQUALS ARRASSIGN: Val_Exp
              {: RESULT = new ArrayDeclaration(Val_ID.lexema, Val_Type, Val_Access, Val_Exp); :};
F_HEADER  ::= FUNCTION IDENTIFICATOR PARENTH_OPEN F_PARAMETERS PARENTH_CLOSE TYPE_IDENT TYPES SEMI_COLON ;
F_BODY    ::= FUNCTION IDENTIFICATOR PARENTH_OPEN F_PARAMETERS PARENTH_CLOSE TYPE_IDENT TYPES CURLY_OPEN INSTRUCTIONS CURLY_CLOSE ;
F_CALL    ::= IDENTIFICATOR PARENTH_OPEN F_ARGUMENTS PARENTH_CLOSE ;


EXP0 ::= EXP1: Val_Exp1 OPERATOR_BAND EXP0: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.BAND); :};
EXP0 ::= EXP1: Val_Exp1 OPERATOR_BOR EXP0: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.BOR); :};
EXP0 ::= EXP1: Val_Exp1 OPERATOR_EQUAL EXP0: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.EQUAL); :};
EXP0 ::= EXP1: Val_Exp1 OPERATOR_NEQ EXP0: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.NEQ); :};
EXP0 ::= EXP1: Val_Exp1
         {: RESULT = Val_Exp1; :};


EXP1 ::= OPERATOR_BNOT EXP2: Val_Exp
         {: RESULT = new EUni(Val_Exp, UniOps.BNOT); :};
EXP1 ::= EXP2: Val_Exp2
         {: RESULT = Val_Exp2; :};


EXP2 ::= EXP3: Val_Exp1 OPERATOR_GT EXP2: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.GT); :};
EXP2 ::= EXP3: Val_Exp1 OPERATOR_LT EXP2: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.LT); :};
EXP2 ::= EXP3: Val_Exp1 OPERATOR_GEQ EXP2: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.GEQ); :};
EXP2 ::= EXP3: Val_Exp1 OPERATOR_LEQ EXP2: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.LEQ); :};
EXP2 ::= EXP3: Val_Exp3
         {: RESULT = Val_Exp3; :};


EXP3 ::= EXP4: Val_Exp1 OPERATOR_ADD EXP3: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.PLUS); :};
EXP3 ::= EXP4: Val_Exp1 OPERATOR_SUB EXP3: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MINUS); :};
EXP3 ::= EXP4: Val_Exp4
         {: RESULT = Val_Exp4; :};


EXP4 ::= EXP5: Val_Exp1 OPERATOR_MULT EXP4: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MULT); :};
EXP4 ::= EXP5: Val_Exp1 OPERATOR_DIV EXP4: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.DIV); :};
EXP4 ::= EXP5: Val_Exp1 OPERATOR_MOD EXP4: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MOD); :};
EXP4 ::= EXP5: Val_Exp5
         {: RESULT = Val_Exp5; :};


EXP5 ::= EXP6: Val_Exp1 OPERATOR_AND EXP5: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.AND); :};
EXP5 ::= EXP6: Val_Exp1 OPERATOR_OR EXP5: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.OR); :};
EXP5 ::= EXP6: Val_Exp1 OPERATOR_XOR EXP5: Val_Exp0
         {: RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.XOR); :}; 
EXP5 ::= OPERATOR_NOT EXP6: Val_Exp
         {: RESULT = new EUni(Val_Exp, UniOps.NOT); :};
EXP5 ::= EXP6: Val_Exp6
         {: RESULT = Val_Exp6; :};


EXP6 ::= OPERATOR_PP EXP6: Val_Exp
         {: RESULT = new EUni(Val_Exp, UniOps.PP_PRE); :};
EXP6 ::= OPERATOR_MM EXP6: Val_Exp
         {: RESULT = new EUni(Val_Exp, UniOps.MM_PRE); :};
EXP6 ::= EXP7: Val_Exp OPERATOR_PP
         {: RESULT = new EUni(Val_Exp, UniOps.PP_POST); :};
EXP6 ::= EXP7: Val_Exp OPERATOR_MM
         {: RESULT = new EUni(Val_Exp, UniOps.MM_POST); :};
EXP6 ::= EXP7: Val_Exp7
         {: RESULT = Val_Exp7; :};


EXP7 ::= VALUE: Val
         {: RESULT = Val; :};
EXP7 ::= IDENTIFICATOR: Val_ID
         {: RESULT = new Identificator(Val_ID.lexema); :};
EXP7 ::= IDENTIFICATOR: Val_ID ARRAY_ACCESS: Val_Access
         {: RESULT = new ArrayAccess(Val_ID.lexema, Val_Access); :};
EXP7 ::= PARENTH_OPEN EXP0: Val_EXP PARENTH_CLOSE
         {: RESULT = Val_EXP; :};
EXP7 ::= ARRASSIGN: Val_E
         {: RESULT = Val_E; :};

ARRASSIGN ::= CURLY_OPEN ARRCONTENTS: Val_Exps CURLY_CLOSE
              {: RESULT = new ExprArray(Val_Exps); :};
// ARRASSIGN ::= RVAL_CHAR_ARR ;

ARRCONTENTS ::= EXP0: Val_E MORE_ARRCONTENTS: Val_Es
                {: Val_Es.addFirst(Val_E);
                   RESULT = Val_Es;
                :};
                
MORE_ARRCONTENTS ::= COMA EXP0: Val_E MORE_ARRCONTENTS: Val_Es
                {: Val_Es.addFirst(Val_E);
                   RESULT = Val_Es;
                :};
MORE_ARRCONTENTS ::= /* EPSILON */
                {: LinkedList<E> emptyList = new LinkedList<>();
                   RESULT = emptyList;
                :};

ARRAY_ACCESS ::= BRACKET_OPEN EXP0: Val_Idx BRACKET_CLOSE ARRAY_ACCESS: Val_Access
                 {: Val_Access.addFirst(Val_Idx);
                    RESULT = Val_Access;
                 :};
ARRAY_ACCESS ::= BRACKET_OPEN EXP0: Val_Idx BRACKET_CLOSE
                 {: LinkedList<E> arrayAccess = new LinkedList<>();
                    arrayAccess.add(Val_Idx);
                    RESULT = arrayAccess;
                 :};

VALUE ::= NUMBER_NAT: Val
         {: RESULT = new Num(Val.lexema, Types.UINT64); :};
VALUE ::= NUMBER_INT: Val
         {: RESULT = new Num(Val.lexema, Types.INT64); :};
VALUE ::= NUMBER_FLOAT: Val
         {: RESULT = new Num(Val.lexema, Types.FLOAT64); :};
VALUE ::= NUMBER_BIN: Val
         {: RESULT = new Num(Val.lexema, Types.UINT64); :};
VALUE ::= NUMBER_HEX: Val
         {: RESULT = new Num(Val.lexema, Types.UINT64); :};
VALUE ::= RVAL_CHAR: Val
         {: RESULT = new Num(Val.lexema, Types.CHAR); :};
VALUE ::= RVAL_CHAR_ARR: Val
         {: RESULT = new Num(Val.lexema, Types.CHAR); :};
VALUE ::= TRUE_: Val
         {: RESULT = new Num(Val.lexema, Types.BOOL); :};
VALUE ::= FALSE_: Val
         {: RESULT = new Num(Val.lexema, Types.BOOL); :};

TYPES ::= UINT8
{: RESULT = Types.UINT8; :};

TYPES ::= UINT16
{: RESULT = Types.UINT16; :};

TYPES ::= UINT32
{: RESULT = Types.UINT32; :};

TYPES ::= UINT64
{: RESULT = Types.UINT64; :};

TYPES ::= INT8
{: RESULT = Types.INT8; :};

TYPES ::= INT16
{: RESULT = Types.INT16; :};

TYPES ::= INT32
{: RESULT = Types.INT32; :};

TYPES ::= INT64
{: RESULT = Types.INT64; :};

TYPES ::= FLOAT32
{: RESULT = Types.FLOAT32; :};

TYPES ::= FLOAT64
{: RESULT = Types.FLOAT64; :};

TYPES ::= CHAR
{: RESULT = Types.CHAR; :};

TYPES ::= UCHAR
{: RESULT = Types.UCHAR; :};

TYPES ::= BOOL
{: RESULT = Types.BOOL; :};

TYPES ::= VOID
{: RESULT = Types.VOID; :};