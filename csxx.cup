package syntax;

import java_cup.runtime.*;
import lex.AnalizadorLexicoTiny;
import lex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};

terminal OPERATOR_ADD;
terminal OPERATOR_SUB;
terminal OPERATOR_MULT;
terminal OPERATOR_DIV;
terminal OPERATOR_AND;
terminal OPERATOR_OR;
terminal OPERATOR_XOR;
terminal OPERATOR_NOT;
terminal OPERATOR_MOD;

terminal OPERATOR_BAND;
terminal OPERATOR_BOR;
terminal OPERATOR_BNOT;
terminal OPERATOR_EQUAL;
terminal OPERATOR_NEQ;
terminal OPERATOR_GT;
terminal OPERATOR_LT;
terminal OPERATOR_GEQ;
terminal OPERATOR_LEQ;

terminal OPERATOR_PP;
terminal OPERATOR_MM;

terminal EQUALS;
terminal COMA;
terminal SEMI_COLON;
terminal DOT;
terminal TYPE_IDENT;

terminal PARENTH_OPEN;
terminal PARENTH_CLOSE;
terminal BRACKET_OPEN;
terminal BRACKET_CLOSE;
terminal CURLY_OPEN;
terminal CURLY_CLOSE;

terminal VOID;
terminal IDENTIFICATOR;
terminal NUMBER_NAT;
terminal NUMBER_INT;
terminal NUMBER_FLOAT;
terminal NUMBER_BIN;
terminal NUMBER_HEX;
terminal RVAL_CHAR;
terminal RVAL_CHAR_ARR;

terminal UINT8;
terminal UINT16;
terminal UINT32;
terminal UINT64;

terminal INT8;
terminal INT16;
terminal INT32;
terminal INT64;

terminal FLOAT32;
terminal FLOAT64;

terminal BOOL;
terminal TRUE;
terminal FALSE;

terminal CHAR;
terminal UCHAR;

terminal STRUCT;

terminal IF;
terminal ELSEIF;
terminal ELSE;

terminal WHILE;
terminal FOR;
terminal LOOP;
terminal CURSOR;
terminal FUNCTION;

non terminal S, INSTRUCTIONS, INSTRUCTION;
non terminal DECLARATIONS, DECLARATION, ASSIGNATION;
non terminal TYPEDEC, STRUCTDEC;
non terminal EXP0, EXP1, EXP2, EXP3, EXP4, EXP5, EXP6, EXP7;
non terminal VALUE, TYPES;

S ::= INSTRUCTIONS ;

INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION | INSTRUCTION ;
INSTRUCTION ::= DECLARATION | ASSIGNATION ;

DECLARATIONS ::= DECLARATIONS DECLARATION | DECLARATION ;
DECLARATION ::= TYPEDEC | STRUCTDEC ;
ASSIGNATION ::= IDENTIFICATOR EQUALS EXP0 SEMI_COLON ;

TYPEDEC   ::= TYPES IDENTIFICATOR SEMI_COLON | TYPES IDENTIFICATOR EQUALS EXP0 SEMI_COLON ;
STRUCTDEC ::= STRUCT IDENTIFICATOR SEMI_COLON | STRUCT IDENTIFICATOR BRACKET_OPEN BRACKET_CLOSE SEMI_COLON | STRUCT IDENTIFICATOR BRACKET_OPEN DECLARATIONS BRACKET_CLOSE SEMI_COLON ;

EXP0 ::= EXP1 OPERATOR_BAND EXP0 | EXP1 OPERATOR_BOR EXP0 | EXP1 OPERATOR_EQUAL EXP0 | EXP1 OPERATOR_NEQ EXP0 | EXP1 ;
EXP1 ::= OPERATOR_BNOT EXP2 | EXP2 ;
EXP2 ::= EXP3 OPERATOR_GT EXP2 | EXP3 OPERATOR_LT EXP2 | EXP3 OPERATOR_GEQ EXP2 | EXP3 OPERATOR_LEQ EXP2 | EXP3 ;
EXP3 ::= EXP4 OPERATOR_ADD EXP3 | EXP4 OPERATOR_SUB EXP3 | EXP4 ;
EXP4 ::= EXP5 OPERATOR_MULT EXP4 | EXP5 OPERATOR_DIV EXP4 | EXP5 OPERATOR_MOD EXP4 | EXP5 ;
EXP5 ::= EXP6 OPERATOR_AND EXP5 | EXP6 OPERATOR_OR EXP5 | EXP6 OPERATOR_XOR EXP5 | OPERATOR_NOT EXP6 | EXP6 ;
EXP6 ::= OPERATOR_PP EXP6 | OPERATOR_MM EXP6 | EXP7 OPERATOR_PP | EXP7 OPERATOR_MM | EXP7 ;
EXP7 ::= VALUE | IDENTIFICATOR | PARENTH_OPEN EXP0 PARENTH_CLOSE ;

VALUE ::= NUMBER_NAT | NUMBER_INT | NUMBER_FLOAT | NUMBER_BIN | NUMBER_HEX | RVAL_CHAR | RVAL_CHAR_ARR | TRUE | FALSE ;

TYPES ::= UINT8 | UINT16 | UINT32 | UINT64 | INT8 | INT16 | INT32 | INT64 | FLOAT32 | FLOAT64 | CHAR | UCHAR | BOOL | VOID ;