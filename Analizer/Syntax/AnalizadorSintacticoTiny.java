
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Nov 14 10:18:05 CET 2024
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import lex.AnalizadorLexicoTiny;
import lex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Nov 14 10:18:05 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\010\007\000\002" +
    "\011\007\000\002\012\007\000\002\013\007\000\002\014" +
    "\007\000\002\015\007\000\002\016\010\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\036\054\031\055\036\056\023\057\022\060" +
    "\016\061\021\062\015\063\014\064\032\065\030\066\026" +
    "\071\010\072\020\073\007\001\002\000\040\002\001\054" +
    "\031\055\036\056\023\057\022\060\016\061\021\062\015" +
    "\063\014\064\032\065\030\066\026\071\010\072\020\073" +
    "\007\001\002\000\042\002\ufffc\040\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\071\ufffc\072\ufffc\073\ufffc\001\002" +
    "\000\042\002\ufffd\040\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\071\ufffd\072\ufffd\073\ufffd\001\002\000\004\044" +
    "\122\001\002\000\004\044\112\001\002\000\004\044\102" +
    "\001\002\000\004\002\101\001\002\000\042\002\ufff9\040" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\071\ufff9\072" +
    "\ufff9\073\ufff9\001\002\000\004\044\uffce\001\002\000\004" +
    "\044\uffcf\001\002\000\004\044\uffd1\001\002\000\042\002" +
    "\ufff8\040\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\071" +
    "\ufff8\072\ufff8\073\ufff8\001\002\000\004\044\070\001\002" +
    "\000\004\044\uffd0\001\002\000\004\044\uffd2\001\002\000" +
    "\004\044\uffd3\001\002\000\042\002\ufffe\040\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\071\ufffe\072\ufffe\073\ufffe" +
    "\001\002\000\004\044\057\001\002\000\004\044\043\001" +
    "\002\000\042\002\ufffa\040\ufffa\054\ufffa\055\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\071\ufffa\072\ufffa\073\ufffa\001\002\000\004" +
    "\044\uffcc\001\002\000\004\044\uffd5\001\002\000\004\044" +
    "\uffcd\001\002\000\004\044\037\001\002\000\042\002\ufffb" +
    "\040\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\071\ufffb" +
    "\072\ufffb\073\ufffb\001\002\000\042\002\ufff7\040\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\071\ufff7\072\ufff7\073" +
    "\ufff7\001\002\000\004\044\uffd4\001\002\000\004\030\040" +
    "\001\002\000\004\045\041\001\002\000\004\032\042\001" +
    "\002\000\042\002\ufff6\040\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065" +
    "\ufff6\066\ufff6\071\ufff6\072\ufff6\073\ufff6\001\002\000\004" +
    "\030\044\001\002\000\022\045\054\046\045\047\047\050" +
    "\053\051\055\052\046\067\050\070\052\001\002\000\004" +
    "\032\uffdc\001\002\000\004\032\uffd8\001\002\000\004\032" +
    "\uffdb\001\002\000\004\032\uffd7\001\002\000\004\032\056" +
    "\001\002\000\004\032\uffd6\001\002\000\004\032\uffda\001" +
    "\002\000\004\032\uffdd\001\002\000\004\032\uffd9\001\002" +
    "\000\042\002\ufff1\040\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\071\ufff1\072\ufff1\073\ufff1\001\002\000\004\030" +
    "\060\001\002\000\014\045\062\046\063\047\065\050\064" +
    "\051\066\001\002\000\004\032\067\001\002\000\004\032" +
    "\uffeb\001\002\000\004\032\uffea\001\002\000\004\032\uffe8" +
    "\001\002\000\004\032\uffe9\001\002\000\004\032\uffe7\001" +
    "\002\000\042\002\ufff4\040\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065" +
    "\ufff4\066\ufff4\071\ufff4\072\ufff4\073\ufff4\001\002\000\004" +
    "\030\071\001\002\000\014\045\072\046\073\050\076\051" +
    "\077\052\074\001\002\000\004\032\uffe2\001\002\000\004" +
    "\032\uffe1\001\002\000\004\032\uffde\001\002\000\004\032" +
    "\100\001\002\000\004\032\uffe0\001\002\000\004\032\uffdf" +
    "\001\002\000\042\002\ufff2\040\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\071\ufff2\072\ufff2\073\ufff2\001\002\000" +
    "\004\002\000\001\002\000\004\030\103\001\002\000\012" +
    "\045\105\046\106\050\107\051\110\001\002\000\004\032" +
    "\111\001\002\000\004\032\uffef\001\002\000\004\032\uffee" +
    "\001\002\000\004\032\uffed\001\002\000\004\032\uffec\001" +
    "\002\000\042\002\ufff5\040\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065" +
    "\ufff5\066\ufff5\071\ufff5\072\ufff5\073\ufff5\001\002\000\004" +
    "\030\113\001\002\000\012\045\115\050\117\051\120\052" +
    "\116\001\002\000\004\032\121\001\002\000\004\032\uffe6" +
    "\001\002\000\004\032\uffe3\001\002\000\004\032\uffe5\001" +
    "\002\000\004\032\uffe4\001\002\000\042\002\ufff3\040\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\071\ufff3\072\ufff3" +
    "\073\ufff3\001\002\000\004\037\123\001\002\000\036\054" +
    "\031\055\036\056\023\057\022\060\016\061\021\062\015" +
    "\063\014\064\032\065\030\066\026\071\010\072\020\073" +
    "\007\001\002\000\040\040\125\054\031\055\036\056\023" +
    "\057\022\060\016\061\021\062\015\063\014\064\032\065" +
    "\030\066\026\071\010\072\020\073\007\001\002\000\004" +
    "\032\127\001\002\000\042\002\uffff\040\uffff\054\uffff\055" +
    "\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff" +
    "\064\uffff\065\uffff\066\uffff\071\uffff\072\uffff\073\uffff\001" +
    "\002\000\042\002\ufff0\040\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\071\ufff0\072\ufff0\073\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\034\002\011\003\003\004\023\005\032\006" +
    "\010\007\024\010\005\011\004\012\033\013\026\014\012" +
    "\015\016\016\034\001\001\000\030\004\125\005\032\006" +
    "\010\007\024\010\005\011\004\012\033\013\026\014\012" +
    "\015\016\016\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\123\004\023\005\032\006\010" +
    "\007\024\010\005\011\004\012\033\013\026\014\012\015" +
    "\016\016\034\001\001\000\030\004\125\005\032\006\010" +
    "\007\024\010\005\011\004\012\033\013\026\014\012\015" +
    "\016\016\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= DECLARATIONS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARATIONS ::= DECLARATIONS DECLARATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARATIONS ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARATION ::= UINTDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATION ::= INTDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATION ::= FLOATDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATION ::= CHARDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= UCHARDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= BOOLDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARATION ::= STRUCTDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // UINTDEC ::= TYPE_UINT IDENTIFICATOR EQUALS NUMBER_NAT SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("UINTDEC",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INTDEC ::= TYPE_INT IDENTIFICATOR EQUALS ALLOWED_INT SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INTDEC",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FLOATDEC ::= TYPE_FLOAT IDENTIFICATOR EQUALS ALLOWED_FLOAT SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FLOATDEC",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CHARDEC ::= CHAR IDENTIFICATOR EQUALS ALLOWED_CHAR SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CHARDEC",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UCHARDEC ::= UCHAR IDENTIFICATOR EQUALS ALLOWED_UCHAR SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("UCHARDEC",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BOOLDEC ::= BOOL IDENTIFICATOR EQUALS ALLOWED_BOOL SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BOOLDEC",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STRUCTDEC ::= STRUCT IDENTIFICATOR BRACKET_OPEN DECLARATIONS BRACKET_CLOSE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ALLOWED_INT ::= NUMBER_NAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_INT",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ALLOWED_INT ::= NUMBER_INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_INT",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ALLOWED_INT ::= NUMBER_BIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_INT",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ALLOWED_INT ::= NUMBER_HEX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_INT",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ALLOWED_FLOAT ::= NUMBER_NAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_FLOAT",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ALLOWED_FLOAT ::= NUMBER_INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_FLOAT",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ALLOWED_FLOAT ::= NUMBER_FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_FLOAT",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ALLOWED_FLOAT ::= NUMBER_BIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_FLOAT",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ALLOWED_FLOAT ::= NUMBER_HEX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_FLOAT",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ALLOWED_CHAR ::= NUMBER_NAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_CHAR",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ALLOWED_CHAR ::= NUMBER_BIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_CHAR",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ALLOWED_CHAR ::= NUMBER_HEX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_CHAR",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ALLOWED_CHAR ::= RVAL_CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_CHAR",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ALLOWED_UCHAR ::= NUMBER_NAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_UCHAR",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ALLOWED_UCHAR ::= NUMBER_INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_UCHAR",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ALLOWED_UCHAR ::= NUMBER_BIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_UCHAR",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ALLOWED_UCHAR ::= NUMBER_HEX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_UCHAR",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ALLOWED_UCHAR ::= RVAL_CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_UCHAR",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ALLOWED_BOOL ::= NUMBER_NAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_BOOL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ALLOWED_BOOL ::= NUMBER_INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_BOOL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ALLOWED_BOOL ::= NUMBER_FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_BOOL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ALLOWED_BOOL ::= NUMBER_BIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_BOOL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ALLOWED_BOOL ::= NUMBER_HEX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_BOOL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ALLOWED_BOOL ::= RVAL_CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_BOOL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ALLOWED_BOOL ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_BOOL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ALLOWED_BOOL ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALLOWED_BOOL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TYPE_UINT ::= UINT8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_UINT",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TYPE_UINT ::= UINT16 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_UINT",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TYPE_UINT ::= UINT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_UINT",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TYPE_UINT ::= UINT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_UINT",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TYPE_INT ::= INT8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_INT",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TYPE_INT ::= INT16 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_INT",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TYPE_INT ::= INT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_INT",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TYPE_INT ::= INT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_INT",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TYPE_FLOAT ::= FLOAT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_FLOAT",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TYPE_FLOAT ::= FLOAT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_FLOAT",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

