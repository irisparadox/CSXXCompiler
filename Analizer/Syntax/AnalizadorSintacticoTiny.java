
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Nov 20 22:09:48 CET 2024
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import lex.AnalizadorLexicoTiny;
import lex.UnidadLexica;
import lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Nov 20 22:09:48 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\006\000\002" +
    "\011\005\000\002\011\007\000\002\012\005\000\002\012" +
    "\007\000\002\012\010\000\002\013\010\000\002\013\012" +
    "\000\002\010\005\000\002\010\003\000\002\026\004\000" +
    "\002\026\002\000\002\027\005\000\002\027\002\000\002" +
    "\030\003\000\002\030\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\003" +
    "\000\002\015\004\000\002\015\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\003\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\004\000\002\021\003\000\002" +
    "\022\004\000\002\022\004\000\002\022\004\000\002\022" +
    "\004\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\042\043\032\044\015\054\031\055\034\056" +
    "\021\057\020\060\012\061\017\062\011\063\010\064\030" +
    "\065\027\066\026\071\006\072\016\073\005\001\002\000" +
    "\006\037\153\044\154\001\002\000\004\044\141\001\002" +
    "\000\006\037\uffb3\044\uffb3\001\002\000\004\002\140\001" +
    "\002\000\006\037\uffb6\044\uffb6\001\002\000\006\037\uffb7" +
    "\044\uffb7\001\002\000\006\037\uffb9\044\uffb9\001\002\000" +
    "\044\002\001\043\032\044\015\054\031\055\034\056\021" +
    "\057\020\060\012\061\017\062\011\063\010\064\030\065" +
    "\027\066\026\071\006\072\016\073\005\001\002\000\044" +
    "\002\ufffe\043\ufffe\044\ufffe\054\ufffe\055\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\071\ufffe\072\ufffe\073\ufffe\001\002\000\004\030" +
    "\035\001\002\000\006\037\uffb2\044\uffb2\001\002\000\006" +
    "\037\uffb8\044\uffb8\001\002\000\006\037\uffba\044\uffba\001" +
    "\002\000\006\037\uffbb\044\uffbb\001\002\000\046\002\ufff9" +
    "\040\ufff9\043\ufff9\044\ufff9\054\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\071\ufff9\072\ufff9\073\ufff9\001\002\000\044\002" +
    "\ufffd\043\ufffd\044\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\001\002\000\046\002\ufff7" +
    "\040\ufff7\043\ufff7\044\ufff7\054\ufff7\055\ufff7\056\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\071\ufff7\072\ufff7\073\ufff7\001\002\000\044\002" +
    "\ufffc\043\ufffc\044\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\071\ufffc\072\ufffc\073\ufffc\001\002\000\006\037\uffb1" +
    "\044\uffb1\001\002\000\006\037\uffb4\044\uffb4\001\002\000" +
    "\006\037\uffb5\044\uffb5\001\002\000\006\037\uffbd\044\uffbd" +
    "\001\002\000\006\037\uffb0\044\uffb0\001\002\000\046\002" +
    "\ufff8\040\ufff8\043\ufff8\044\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065" +
    "\ufff8\066\ufff8\071\ufff8\072\ufff8\073\ufff8\001\002\000\006" +
    "\037\uffbc\044\uffbc\001\002\000\040\013\053\017\063\026" +
    "\050\027\052\035\060\044\056\045\065\046\057\047\055" +
    "\050\046\051\064\052\061\053\054\067\051\070\062\001" +
    "\002\000\052\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\014\uffca\015\uffca\016\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\136\027\135" +
    "\032\uffca\036\uffca\001\002\000\046\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\130\011\127\012\131\014\uffcf\015\uffcf" +
    "\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\032\uffcf\036\uffcf\001\002\000\040\004\uffd4\005\uffd4" +
    "\006\122\007\123\014\121\015\uffd4\016\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\032\uffd4\036\uffd4" +
    "\001\002\000\032\004\116\005\115\015\uffd8\016\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\032\uffd8" +
    "\036\uffd8\001\002\000\026\015\uffdb\016\uffdb\020\uffdb\021" +
    "\uffdb\022\107\023\106\024\105\025\110\032\uffdb\036\uffdb" +
    "\001\002\000\016\015\uffe0\016\uffe0\020\uffe0\021\uffe0\032" +
    "\uffe0\036\uffe0\001\002\000\016\015\076\016\100\020\075" +
    "\021\077\032\uffe2\036\uffe2\001\002\000\004\032\074\001" +
    "\002\000\056\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\031\uffc3\032\uffc3\036\uffc3\042\uffc3\001\002\000\052\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\032\uffc9\036\uffc9" +
    "\001\002\000\034\026\050\027\052\035\060\044\056\045" +
    "\065\046\057\047\055\050\046\051\064\052\061\053\054" +
    "\067\051\070\062\001\002\000\056\004\uffbf\005\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf\036\uffbf\042\uffbf" +
    "\001\002\000\034\026\050\027\052\035\060\044\056\045" +
    "\065\046\057\047\055\050\046\051\064\052\061\053\054" +
    "\067\051\070\062\001\002\000\034\026\050\027\052\035" +
    "\060\044\056\045\065\046\057\047\055\050\046\051\064" +
    "\052\061\053\054\067\051\070\062\001\002\000\056\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\031\uffc0\032\uffc0" +
    "\036\uffc0\042\uffc0\001\002\000\056\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4\036\uffc4\042\uffc4" +
    "\001\002\000\052\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\032\uffc8\036\uffc8\001\002\000\056\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\036\uffc5\042" +
    "\uffc5\001\002\000\040\013\053\017\063\026\050\027\052" +
    "\035\060\044\056\045\065\046\057\047\055\050\046\051" +
    "\064\052\061\053\054\067\051\070\062\001\002\000\056" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\031\uffc1\032" +
    "\uffc1\036\uffc1\042\uffc1\001\002\000\056\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\031\uffbe\032\uffbe\036\uffbe\042" +
    "\uffbe\001\002\000\036\013\053\026\050\027\052\035\060" +
    "\044\056\045\065\046\057\047\055\050\046\051\064\052" +
    "\061\053\054\067\051\070\062\001\002\000\056\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2\032\uffc2\036" +
    "\uffc2\042\uffc2\001\002\000\056\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\031\uffc6\032\uffc6\036\uffc6\042\uffc6\001" +
    "\002\000\016\015\uffe1\016\uffe1\020\uffe1\021\uffe1\032\uffe1" +
    "\036\uffe1\001\002\000\004\036\070\001\002\000\052\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\032\uffc7\036\uffc7" +
    "\001\002\000\040\004\uffd0\005\uffd0\006\uffd0\007\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\032\uffd0\036\uffd0\001\002\000\046\004" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\032\uffcd\036\uffcd\001\002\000\046" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\014\uffce\015\uffce\016\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\032\uffce\036\uffce\001\002\000" +
    "\044\002\ufff6\043\ufff6\044\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065" +
    "\ufff6\066\ufff6\071\ufff6\072\ufff6\073\ufff6\001\002\000\040" +
    "\013\053\017\063\026\050\027\052\035\060\044\056\045" +
    "\065\046\057\047\055\050\046\051\064\052\061\053\054" +
    "\067\051\070\062\001\002\000\040\013\053\017\063\026" +
    "\050\027\052\035\060\044\056\045\065\046\057\047\055" +
    "\050\046\051\064\052\061\053\054\067\051\070\062\001" +
    "\002\000\040\013\053\017\063\026\050\027\052\035\060" +
    "\044\056\045\065\046\057\047\055\050\046\051\064\052" +
    "\061\053\054\067\051\070\062\001\002\000\040\013\053" +
    "\017\063\026\050\027\052\035\060\044\056\045\065\046" +
    "\057\047\055\050\046\051\064\052\061\053\054\067\051" +
    "\070\062\001\002\000\006\032\uffe5\036\uffe5\001\002\000" +
    "\006\032\uffe3\036\uffe3\001\002\000\006\032\uffe6\036\uffe6" +
    "\001\002\000\006\032\uffe4\036\uffe4\001\002\000\036\013" +
    "\053\026\050\027\052\035\060\044\056\045\065\046\057" +
    "\047\055\050\046\051\064\052\061\053\054\067\051\070" +
    "\062\001\002\000\036\013\053\026\050\027\052\035\060" +
    "\044\056\045\065\046\057\047\055\050\046\051\064\052" +
    "\061\053\054\067\051\070\062\001\002\000\036\013\053" +
    "\026\050\027\052\035\060\044\056\045\065\046\057\047" +
    "\055\050\046\051\064\052\061\053\054\067\051\070\062" +
    "\001\002\000\036\013\053\026\050\027\052\035\060\044" +
    "\056\045\065\046\057\047\055\050\046\051\064\052\061" +
    "\053\054\067\051\070\062\001\002\000\016\015\uffdc\016" +
    "\uffdc\020\uffdc\021\uffdc\032\uffdc\036\uffdc\001\002\000\016" +
    "\015\uffdf\016\uffdf\020\uffdf\021\uffdf\032\uffdf\036\uffdf\001" +
    "\002\000\016\015\uffde\016\uffde\020\uffde\021\uffde\032\uffde" +
    "\036\uffde\001\002\000\016\015\uffdd\016\uffdd\020\uffdd\021" +
    "\uffdd\032\uffdd\036\uffdd\001\002\000\036\013\053\026\050" +
    "\027\052\035\060\044\056\045\065\046\057\047\055\050" +
    "\046\051\064\052\061\053\054\067\051\070\062\001\002" +
    "\000\036\013\053\026\050\027\052\035\060\044\056\045" +
    "\065\046\057\047\055\050\046\051\064\052\061\053\054" +
    "\067\051\070\062\001\002\000\026\015\uffda\016\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\032\uffda" +
    "\036\uffda\001\002\000\026\015\uffd9\016\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\032\uffd9\036\uffd9" +
    "\001\002\000\036\013\053\026\050\027\052\035\060\044" +
    "\056\045\065\046\057\047\055\050\046\051\064\052\061" +
    "\053\054\067\051\070\062\001\002\000\036\013\053\026" +
    "\050\027\052\035\060\044\056\045\065\046\057\047\055" +
    "\050\046\051\064\052\061\053\054\067\051\070\062\001" +
    "\002\000\036\013\053\026\050\027\052\035\060\044\056" +
    "\045\065\046\057\047\055\050\046\051\064\052\061\053" +
    "\054\067\051\070\062\001\002\000\032\004\uffd6\005\uffd6" +
    "\015\uffd6\016\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\032\uffd6\036\uffd6\001\002\000\032\004\uffd7" +
    "\005\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\032\uffd7\036\uffd7\001\002\000\032" +
    "\004\uffd5\005\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\032\uffd5\036\uffd5\001\002" +
    "\000\036\013\053\026\050\027\052\035\060\044\056\045" +
    "\065\046\057\047\055\050\046\051\064\052\061\053\054" +
    "\067\051\070\062\001\002\000\036\013\053\026\050\027" +
    "\052\035\060\044\056\045\065\046\057\047\055\050\046" +
    "\051\064\052\061\053\054\067\051\070\062\001\002\000" +
    "\036\013\053\026\050\027\052\035\060\044\056\045\065" +
    "\046\057\047\055\050\046\051\064\052\061\053\054\067" +
    "\051\070\062\001\002\000\040\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\032\uffd1\036\uffd1\001\002" +
    "\000\040\004\uffd3\005\uffd3\006\uffd3\007\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\032\uffd3\036\uffd3\001\002\000\040\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\032\uffd2\036" +
    "\uffd2\001\002\000\046\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\032\uffcb" +
    "\036\uffcb\001\002\000\046\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\032" +
    "\uffcc\036\uffcc\001\002\000\044\002\uffff\043\uffff\044\uffff" +
    "\054\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062" +
    "\uffff\063\uffff\064\uffff\065\uffff\066\uffff\071\uffff\072\uffff" +
    "\073\uffff\001\002\000\004\002\000\001\002\000\006\032" +
    "\142\037\143\001\002\000\046\002\ufff3\040\ufff3\043\ufff3" +
    "\044\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\071\ufff3" +
    "\072\ufff3\073\ufff3\001\002\000\042\040\145\043\032\054" +
    "\031\055\034\056\021\057\020\060\012\061\017\062\011" +
    "\063\010\064\030\065\027\066\026\071\006\072\016\073" +
    "\005\001\002\000\042\040\150\043\032\054\031\055\034" +
    "\056\021\057\020\060\012\061\017\062\011\063\010\064" +
    "\030\065\027\066\026\071\006\072\016\073\005\001\002" +
    "\000\004\032\147\001\002\000\042\040\ufffa\043\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\066\ufffa\071\ufffa\072\ufffa\073" +
    "\ufffa\001\002\000\046\002\ufff2\040\ufff2\043\ufff2\044\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\071\ufff2\072\ufff2" +
    "\073\ufff2\001\002\000\004\032\152\001\002\000\042\040" +
    "\ufffb\043\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\071" +
    "\ufffb\072\ufffb\073\ufffb\001\002\000\046\002\ufff1\040\ufff1" +
    "\043\ufff1\044\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1" +
    "\071\ufff1\072\ufff1\073\ufff1\001\002\000\004\045\161\001" +
    "\002\000\006\030\156\032\155\001\002\000\046\002\ufff5" +
    "\040\ufff5\043\ufff5\044\ufff5\054\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\071\ufff5\072\ufff5\073\ufff5\001\002\000\040\013" +
    "\053\017\063\026\050\027\052\035\060\044\056\045\065" +
    "\046\057\047\055\050\046\051\064\052\061\053\054\067" +
    "\051\070\062\001\002\000\004\032\160\001\002\000\046" +
    "\002\ufff4\040\ufff4\043\ufff4\044\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\071\ufff4\072\ufff4\073\ufff4\001\002\000" +
    "\004\040\162\001\002\000\004\044\163\001\002\000\006" +
    "\030\165\032\164\001\002\000\046\002\ufff0\040\ufff0\043" +
    "\ufff0\044\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\071" +
    "\ufff0\072\ufff0\073\ufff0\001\002\000\006\041\166\053\170" +
    "\001\002\000\030\042\uffeb\044\172\045\065\046\057\047" +
    "\055\050\046\051\064\052\061\053\054\067\051\070\062" +
    "\001\002\000\004\032\171\001\002\000\004\032\uffed\001" +
    "\002\000\046\002\uffef\040\uffef\043\uffef\044\uffef\054\uffef" +
    "\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063" +
    "\uffef\064\uffef\065\uffef\066\uffef\071\uffef\072\uffef\073\uffef" +
    "\001\002\000\006\031\uffe7\042\uffe7\001\002\000\006\031" +
    "\uffe8\042\uffe8\001\002\000\006\031\177\042\uffe9\001\002" +
    "\000\004\042\176\001\002\000\004\032\uffee\001\002\000" +
    "\026\044\172\045\065\046\057\047\055\050\046\051\064" +
    "\052\061\053\054\067\051\070\062\001\002\000\004\042" +
    "\uffec\001\002\000\006\031\177\042\uffe9\001\002\000\004" +
    "\042\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\024\002\006\003\012\004\013\006\022\007" +
    "\024\011\021\012\032\013\023\025\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\136\006\022\007\024\011\021\012\032\013" +
    "\023\025\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\014\044\015" +
    "\043\016\042\017\041\020\040\021\037\022\036\023\035" +
    "\024\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\072\023\035\024\046" +
    "\001\001\000\002\001\001\000\010\022\071\023\035\024" +
    "\046\001\001\000\010\022\070\023\035\024\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\066\015\043\016\042\017\041" +
    "\020\040\021\037\022\036\023\035\024\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\065\017\041" +
    "\020\040\021\037\022\036\023\035\024\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\014\103" +
    "\015\043\016\042\017\041\020\040\021\037\022\036\023" +
    "\035\024\046\001\001\000\024\014\102\015\043\016\042" +
    "\017\041\020\040\021\037\022\036\023\035\024\046\001" +
    "\001\000\024\014\101\015\043\016\042\017\041\020\040" +
    "\021\037\022\036\023\035\024\046\001\001\000\024\014" +
    "\100\015\043\016\042\017\041\020\040\021\037\022\036" +
    "\023\035\024\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\113" +
    "\017\041\020\040\021\037\022\036\023\035\024\046\001" +
    "\001\000\020\016\112\017\041\020\040\021\037\022\036" +
    "\023\035\024\046\001\001\000\020\016\111\017\041\020" +
    "\040\021\037\022\036\023\035\024\046\001\001\000\020" +
    "\016\110\017\041\020\040\021\037\022\036\023\035\024" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\117\020\040\021" +
    "\037\022\036\023\035\024\046\001\001\000\016\017\116" +
    "\020\040\021\037\022\036\023\035\024\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\125\021\037" +
    "\022\036\023\035\024\046\001\001\000\014\020\124\021" +
    "\037\022\036\023\035\024\046\001\001\000\014\020\123" +
    "\021\037\022\036\023\035\024\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\133" +
    "\022\036\023\035\024\046\001\001\000\012\021\132\022" +
    "\036\023\035\024\046\001\001\000\012\021\131\022\036" +
    "\023\035\024\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\143\006\145\011\021\012\032" +
    "\013\023\025\003\001\001\000\014\006\150\011\021\012" +
    "\032\013\023\025\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\014\156\015\043\016\042\017" +
    "\041\020\040\021\037\022\036\023\035\024\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\166\001\001\000\010\024\172\026\174\030\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\172" +
    "\030\200\001\001\000\002\001\001\000\004\027\201\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= INSTRUCTIONS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= ASSIGNATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATIONS ::= DECLARATIONS DECLARATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATIONS ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= TYPEDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= STRUCTDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARATION ::= ARRDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASSIGNATION ::= IDENTIFICATOR EQUALS EXP0 SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPEDEC ::= TYPES IDENTIFICATOR SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEC",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPEDEC ::= TYPES IDENTIFICATOR EQUALS EXP0 SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEC",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STRUCTDEC ::= STRUCT IDENTIFICATOR SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STRUCTDEC ::= STRUCT IDENTIFICATOR BRACKET_OPEN BRACKET_CLOSE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STRUCTDEC ::= STRUCT IDENTIFICATOR BRACKET_OPEN DECLARATIONS BRACKET_CLOSE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARRDEC ::= TYPES BRACKET_OPEN NUMBER_NAT BRACKET_CLOSE IDENTIFICATOR SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRDEC",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARRDEC ::= TYPES BRACKET_OPEN NUMBER_NAT BRACKET_CLOSE IDENTIFICATOR EQUALS ARRASSIGN SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRDEC",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARRASSIGN ::= CURLY_OPEN ARRCONTENTS CURLY_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRASSIGN",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARRASSIGN ::= RVAL_CHAR_ARR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRASSIGN",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARRCONTENTS ::= ARRCONTENT MORE_ARRCONTENTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENTS",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARRCONTENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENTS",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MORE_ARRCONTENTS ::= COMA ARRCONTENT MORE_ARRCONTENTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARRCONTENTS",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MORE_ARRCONTENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARRCONTENTS",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARRCONTENT ::= VALUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENT",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARRCONTENT ::= IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENT",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP0 ::= EXP1 OPERATOR_BAND EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.BAND); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP0 ::= EXP1 OPERATOR_BOR EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.BOR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP0 ::= EXP1 OPERATOR_EQUAL EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.EQUAL); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP0 ::= EXP1 OPERATOR_NEQ EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.NEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP0 ::= EXP1 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP1 ::= OPERATOR_BNOT EXP2 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.BNOT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP1 ::= EXP2 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP2 ::= EXP3 OPERATOR_GT EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.GT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP2 ::= EXP3 OPERATOR_LT EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.LT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP2 ::= EXP3 OPERATOR_GEQ EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.GEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP2 ::= EXP3 OPERATOR_LEQ EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.LEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP2 ::= EXP3 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP3 ::= EXP4 OPERATOR_ADD EXP3 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.PLUS); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP3 ::= EXP4 OPERATOR_SUB EXP3 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MINUS); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP3 ::= EXP4 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP4 ::= EXP5 OPERATOR_MULT EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MULT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP4 ::= EXP5 OPERATOR_DIV EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.DIV); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP4 ::= EXP5 OPERATOR_MOD EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MOD); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP4 ::= EXP5 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP5 ::= EXP6 OPERATOR_AND EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.AND); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP5 ::= EXP6 OPERATOR_OR EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.OR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP5 ::= EXP6 OPERATOR_XOR EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.XOR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP5 ::= OPERATOR_NOT EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.NOT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP5 ::= EXP6 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP6 ::= OPERATOR_PP EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.PP_PRE); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP6 ::= OPERATOR_MM EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.MM_PRE); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP6 ::= EXP7 OPERATOR_PP 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new EUni(Val_Exp, UniOps.PP_POST); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP6 ::= EXP7 OPERATOR_MM 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new EUni(Val_Exp, UniOps.MM_POST); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP6 ::= EXP7 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP7 ::= VALUE 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP7 ::= IDENTIFICATOR 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP7 ::= PARENTH_OPEN EXP0 PARENTH_CLOSE 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALUE ::= NUMBER_NAT 
            {
              Num RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALUE ::= NUMBER_INT 
            {
              Num RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALUE ::= NUMBER_FLOAT 
            {
              Num RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALUE ::= NUMBER_BIN 
            {
              Num RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALUE ::= NUMBER_HEX 
            {
              Num RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALUE ::= RVAL_CHAR 
            {
              Num RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALUE ::= RVAL_CHAR_ARR 
            {
              Num RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALUE ::= TRUE 
            {
              Num RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALUE ::= FALSE 
            {
              Num RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TYPES ::= UINT8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TYPES ::= UINT16 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TYPES ::= UINT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TYPES ::= UINT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TYPES ::= INT8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TYPES ::= INT16 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TYPES ::= INT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TYPES ::= INT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TYPES ::= FLOAT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TYPES ::= FLOAT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TYPES ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TYPES ::= UCHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TYPES ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TYPES ::= VOID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

