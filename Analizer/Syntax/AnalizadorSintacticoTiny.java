
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Dec 09 14:03:00 CET 2024
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import lex.AnalizadorLexicoTiny;
import lex.UnidadLexica;
import lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Dec 09 14:03:00 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\021\013\000\002" +
    "\022\002\000\002\022\012\000\002\023\002\000\002\023" +
    "\007\000\002\024\011\000\002\006\003\000\002\006\003" +
    "\000\002\011\004\000\002\011\002\000\002\012\005\000" +
    "\002\012\002\000\002\013\003\000\002\014\004\000\002" +
    "\014\002\000\002\015\005\000\002\015\002\000\002\016" +
    "\003\000\002\007\005\000\002\007\004\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\017\005\000" +
    "\002\025\004\000\002\025\006\000\002\026\004\000\002" +
    "\026\006\000\002\026\007\000\002\027\007\000\002\027" +
    "\011\000\002\030\012\000\002\031\014\000\002\032\006" +
    "\000\002\020\005\000\002\020\003\000\002\045\004\000" +
    "\002\045\002\000\002\046\005\000\002\046\002\000\002" +
    "\047\003\000\002\047\003\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\003" +
    "\000\002\034\004\000\002\034\003\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\003\000\002\036\005\000\002\036\005\000\002\036" +
    "\003\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\003\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\004\000\002\040\003\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\005\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\046\043\036\044\020\054\034\055\040\056" +
    "\024\057\023\060\015\061\022\062\016\063\014\064\035" +
    "\065\033\066\032\071\007\072\021\073\005\074\012\100" +
    "\010\001\002\000\006\037\227\044\230\001\002\000\004" +
    "\044\216\001\002\000\052\002\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\071\ufff8\072" +
    "\ufff8\073\ufff8\074\ufff8\100\ufff8\001\002\000\006\037\uff99" +
    "\044\uff99\001\002\000\004\035\210\001\002\000\004\002" +
    "\207\001\002\000\004\035\160\001\002\000\052\002\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\054\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\100\ufffb\001" +
    "\002\000\006\037\uff9c\044\uff9c\001\002\000\006\037\uff9f" +
    "\044\uff9f\001\002\000\006\037\uff9d\044\uff9d\001\002\000" +
    "\050\002\uffff\043\uffff\044\uffff\054\uffff\055\uffff\056\uffff" +
    "\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\065" +
    "\uffff\066\uffff\071\uffff\072\uffff\073\uffff\074\uffff\100\uffff" +
    "\001\002\000\006\030\046\035\047\001\002\000\006\037" +
    "\uff98\044\uff98\001\002\000\006\037\uff9e\044\uff9e\001\002" +
    "\000\006\037\uffa0\044\uffa0\001\002\000\006\037\uffa1\044" +
    "\uffa1\001\002\000\004\032\uffe2\001\002\000\004\032\045" +
    "\001\002\000\004\032\044\001\002\000\004\032\uffe0\001" +
    "\002\000\004\032\043\001\002\000\006\037\uff97\044\uff97" +
    "\001\002\000\006\037\uff9a\044\uff9a\001\002\000\006\037" +
    "\uffa3\044\uffa3\001\002\000\006\037\uff9b\044\uff9b\001\002" +
    "\000\006\037\uff96\044\uff96\001\002\000\004\032\uffe1\001" +
    "\002\000\006\037\uffa2\044\uffa2\001\002\000\050\002\001" +
    "\043\036\044\020\054\034\055\040\056\024\057\023\060" +
    "\015\061\022\062\016\063\014\064\035\065\033\066\032" +
    "\071\007\072\021\073\005\074\012\100\010\001\002\000" +
    "\050\002\ufffe\043\ufffe\044\ufffe\054\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\100\ufffe" +
    "\001\002\000\052\002\ufff7\042\ufff7\043\ufff7\044\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\071\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\100\ufff7\001\002\000\052\002\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\071\ufffa\072\ufffa\073\ufffa\074\ufffa\100\ufffa\001\002\000" +
    "\052\002\ufff9\042\ufff9\043\ufff9\044\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064" +
    "\ufff9\065\ufff9\066\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9" +
    "\100\ufff9\001\002\000\040\013\075\017\105\026\072\027" +
    "\073\035\102\044\100\045\107\046\101\047\077\050\070" +
    "\051\106\052\103\053\076\067\074\070\104\001\002\000" +
    "\006\036\uffe8\044\051\001\002\000\004\036\057\001\002" +
    "\000\006\031\uffe5\036\uffe5\001\002\000\006\031\053\036" +
    "\uffe6\001\002\000\004\044\051\001\002\000\004\036\uffe9" +
    "\001\002\000\006\031\053\036\uffe6\001\002\000\004\036" +
    "\uffe7\001\002\000\004\032\uffd5\001\002\000\052\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\026\157\027\156\032\uffb0\036\uffb0\001" +
    "\002\000\046\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\151" +
    "\011\150\012\152\014\uffb5\015\uffb5\016\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\032\uffb5\036\uffb5" +
    "\001\002\000\040\004\uffba\005\uffba\006\143\007\144\014" +
    "\142\015\uffba\016\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\032\uffba\036\uffba\001\002\000\032\004" +
    "\137\005\136\015\uffbe\016\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\032\uffbe\036\uffbe\001\002\000" +
    "\026\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\130\023\126" +
    "\024\127\025\131\032\uffc1\036\uffc1\001\002\000\016\015" +
    "\uffc6\016\uffc6\020\uffc6\021\uffc6\032\uffc6\036\uffc6\001\002" +
    "\000\016\015\117\016\121\020\116\021\120\032\uffc8\036" +
    "\uffc8\001\002\000\004\032\uffdf\001\002\000\056\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\031\uffa9\032\uffa9\036" +
    "\uffa9\042\uffa9\001\002\000\052\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\032\uffaf\036\uffaf\001\002\000\034\026" +
    "\072\027\073\035\102\044\100\045\107\046\101\047\077" +
    "\050\070\051\106\052\103\053\076\067\074\070\104\001" +
    "\002\000\034\026\072\027\073\035\102\044\100\045\107" +
    "\046\101\047\077\050\070\051\106\052\103\053\076\067" +
    "\074\070\104\001\002\000\056\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\031\uffa5\032\uffa5\036\uffa5\042\uffa5\001" +
    "\002\000\034\026\072\027\073\035\102\044\100\045\107" +
    "\046\101\047\077\050\070\051\106\052\103\053\076\067" +
    "\074\070\104\001\002\000\056\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\031\uffa6\032\uffa6\036\uffa6\042\uffa6\001" +
    "\002\000\056\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\014\uffaa\015\uffaa\016\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\031\uffaa\032\uffaa\036\uffaa\042\uffaa\001\002\000\052\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\014\uffae\015\uffae\016\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\026\uffae\027\uffae\032\uffae\036\uffae" +
    "\001\002\000\056\004\uffab\005\uffab\006\uffab\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\014\uffab\015\uffab\016\uffab\020\uffab" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027" +
    "\uffab\031\uffab\032\uffab\036\uffab\042\uffab\001\002\000\040" +
    "\013\075\017\105\026\072\027\073\035\102\044\100\045" +
    "\107\046\101\047\077\050\070\051\106\052\103\053\076" +
    "\067\074\070\104\001\002\000\056\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\031\uffa7\032\uffa7\036\uffa7\042\uffa7" +
    "\001\002\000\056\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\014\uffa4\015\uffa4\016\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\031\uffa4\032\uffa4\036\uffa4\042\uffa4\001\002\000\036" +
    "\013\075\026\072\027\073\035\102\044\100\045\107\046" +
    "\101\047\077\050\070\051\106\052\103\053\076\067\074" +
    "\070\104\001\002\000\056\004\uffa8\005\uffa8\006\uffa8\007" +
    "\uffa8\010\uffa8\011\uffa8\012\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\031\uffa8\032\uffa8\036\uffa8\042\uffa8\001\002" +
    "\000\056\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011" +
    "\uffac\012\uffac\014\uffac\015\uffac\016\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\031" +
    "\uffac\032\uffac\036\uffac\042\uffac\001\002\000\016\015\uffc7" +
    "\016\uffc7\020\uffc7\021\uffc7\032\uffc7\036\uffc7\001\002\000" +
    "\004\036\112\001\002\000\052\004\uffad\005\uffad\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\014\uffad\015\uffad\016" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\032\uffad\036\uffad\001\002\000\040\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\032" +
    "\uffb6\036\uffb6\001\002\000\046\004\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\012\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\032\uffb3\036\uffb3\001\002\000\046\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\032\uffb4\036\uffb4\001\002\000\040\013\075\017\105" +
    "\026\072\027\073\035\102\044\100\045\107\046\101\047" +
    "\077\050\070\051\106\052\103\053\076\067\074\070\104" +
    "\001\002\000\040\013\075\017\105\026\072\027\073\035" +
    "\102\044\100\045\107\046\101\047\077\050\070\051\106" +
    "\052\103\053\076\067\074\070\104\001\002\000\040\013" +
    "\075\017\105\026\072\027\073\035\102\044\100\045\107" +
    "\046\101\047\077\050\070\051\106\052\103\053\076\067" +
    "\074\070\104\001\002\000\040\013\075\017\105\026\072" +
    "\027\073\035\102\044\100\045\107\046\101\047\077\050" +
    "\070\051\106\052\103\053\076\067\074\070\104\001\002" +
    "\000\006\032\uffcb\036\uffcb\001\002\000\006\032\uffc9\036" +
    "\uffc9\001\002\000\006\032\uffcc\036\uffcc\001\002\000\006" +
    "\032\uffca\036\uffca\001\002\000\036\013\075\026\072\027" +
    "\073\035\102\044\100\045\107\046\101\047\077\050\070" +
    "\051\106\052\103\053\076\067\074\070\104\001\002\000" +
    "\036\013\075\026\072\027\073\035\102\044\100\045\107" +
    "\046\101\047\077\050\070\051\106\052\103\053\076\067" +
    "\074\070\104\001\002\000\036\013\075\026\072\027\073" +
    "\035\102\044\100\045\107\046\101\047\077\050\070\051" +
    "\106\052\103\053\076\067\074\070\104\001\002\000\036" +
    "\013\075\026\072\027\073\035\102\044\100\045\107\046" +
    "\101\047\077\050\070\051\106\052\103\053\076\067\074" +
    "\070\104\001\002\000\016\015\uffc2\016\uffc2\020\uffc2\021" +
    "\uffc2\032\uffc2\036\uffc2\001\002\000\016\015\uffc5\016\uffc5" +
    "\020\uffc5\021\uffc5\032\uffc5\036\uffc5\001\002\000\016\015" +
    "\uffc3\016\uffc3\020\uffc3\021\uffc3\032\uffc3\036\uffc3\001\002" +
    "\000\016\015\uffc4\016\uffc4\020\uffc4\021\uffc4\032\uffc4\036" +
    "\uffc4\001\002\000\036\013\075\026\072\027\073\035\102" +
    "\044\100\045\107\046\101\047\077\050\070\051\106\052" +
    "\103\053\076\067\074\070\104\001\002\000\036\013\075" +
    "\026\072\027\073\035\102\044\100\045\107\046\101\047" +
    "\077\050\070\051\106\052\103\053\076\067\074\070\104" +
    "\001\002\000\026\015\uffc0\016\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\032\uffc0\036\uffc0\001\002" +
    "\000\026\015\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\032\uffbf\036\uffbf\001\002\000\036" +
    "\013\075\026\072\027\073\035\102\044\100\045\107\046" +
    "\101\047\077\050\070\051\106\052\103\053\076\067\074" +
    "\070\104\001\002\000\036\013\075\026\072\027\073\035" +
    "\102\044\100\045\107\046\101\047\077\050\070\051\106" +
    "\052\103\053\076\067\074\070\104\001\002\000\036\013" +
    "\075\026\072\027\073\035\102\044\100\045\107\046\101" +
    "\047\077\050\070\051\106\052\103\053\076\067\074\070" +
    "\104\001\002\000\032\004\uffbc\005\uffbc\015\uffbc\016\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\032" +
    "\uffbc\036\uffbc\001\002\000\032\004\uffbd\005\uffbd\015\uffbd" +
    "\016\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\032\uffbd\036\uffbd\001\002\000\032\004\uffbb\005\uffbb" +
    "\015\uffbb\016\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\032\uffbb\036\uffbb\001\002\000\036\013\075" +
    "\026\072\027\073\035\102\044\100\045\107\046\101\047" +
    "\077\050\070\051\106\052\103\053\076\067\074\070\104" +
    "\001\002\000\036\013\075\026\072\027\073\035\102\044" +
    "\100\045\107\046\101\047\077\050\070\051\106\052\103" +
    "\053\076\067\074\070\104\001\002\000\036\013\075\026" +
    "\072\027\073\035\102\044\100\045\107\046\101\047\077" +
    "\050\070\051\106\052\103\053\076\067\074\070\104\001" +
    "\002\000\040\004\uffb7\005\uffb7\006\uffb7\007\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\032\uffb7\036\uffb7\001\002\000\040\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\014\uffb9\015\uffb9\016\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\032\uffb9" +
    "\036\uffb9\001\002\000\040\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\032\uffb8\036\uffb8\001\002\000" +
    "\046\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1" +
    "\012\uffb1\014\uffb1\015\uffb1\016\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\032\uffb1\036\uffb1\001\002" +
    "\000\046\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011" +
    "\uffb2\012\uffb2\014\uffb2\015\uffb2\016\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\032\uffb2\036\uffb2\001" +
    "\002\000\040\013\075\017\105\026\072\027\073\035\102" +
    "\044\100\045\107\046\101\047\077\050\070\051\106\052" +
    "\103\053\076\067\074\070\104\001\002\000\004\036\162" +
    "\001\002\000\004\041\163\001\002\000\046\043\036\044" +
    "\020\054\034\055\040\056\024\057\023\060\015\061\022" +
    "\062\016\063\014\064\035\065\033\066\032\071\007\072" +
    "\021\073\005\074\012\100\010\001\002\000\050\042\166" +
    "\043\036\044\020\054\034\055\040\056\024\057\023\060" +
    "\015\061\022\062\016\063\014\064\035\065\033\066\032" +
    "\071\007\072\021\073\005\074\012\100\010\001\002\000" +
    "\050\042\ufffc\043\ufffc\044\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065" +
    "\ufffc\066\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\100\ufffc" +
    "\001\002\000\056\002\ufff5\042\ufff5\043\ufff5\044\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\066\ufff5\071\ufff5\072\ufff5\073" +
    "\ufff5\074\ufff5\075\171\076\ufff5\100\ufff5\001\002\000\050" +
    "\042\ufffd\043\ufffd\044\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\100\ufffd\001" +
    "\002\000\054\002\ufff3\042\ufff3\043\ufff3\044\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\071\ufff3\072\ufff3\073\ufff3" +
    "\074\ufff3\076\202\100\ufff3\001\002\000\004\035\172\001" +
    "\002\000\040\013\075\017\105\026\072\027\073\035\102" +
    "\044\100\045\107\046\101\047\077\050\070\051\106\052" +
    "\103\053\076\067\074\070\104\001\002\000\004\036\174" +
    "\001\002\000\004\041\175\001\002\000\046\043\036\044" +
    "\020\054\034\055\040\056\024\057\023\060\015\061\022" +
    "\062\016\063\014\064\035\065\033\066\032\071\007\072" +
    "\021\073\005\074\012\100\010\001\002\000\050\042\177" +
    "\043\036\044\020\054\034\055\040\056\024\057\023\060" +
    "\015\061\022\062\016\063\014\064\035\065\033\066\032" +
    "\071\007\072\021\073\005\074\012\100\010\001\002\000" +
    "\056\002\ufff5\042\ufff5\043\ufff5\044\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5" +
    "\075\171\076\ufff5\100\ufff5\001\002\000\054\002\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\076\ufff4\100\ufff4" +
    "\001\002\000\052\002\ufff6\042\ufff6\043\ufff6\044\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\065\ufff6\066\ufff6\071\ufff6\072\ufff6\073" +
    "\ufff6\074\ufff6\100\ufff6\001\002\000\004\077\203\001\002" +
    "\000\004\041\204\001\002\000\046\043\036\044\020\054" +
    "\034\055\040\056\024\057\023\060\015\061\022\062\016" +
    "\063\014\064\035\065\033\066\032\071\007\072\021\073" +
    "\005\074\012\100\010\001\002\000\050\042\206\043\036" +
    "\044\020\054\034\055\040\056\024\057\023\060\015\061" +
    "\022\062\016\063\014\064\035\065\033\066\032\071\007" +
    "\072\021\073\005\074\012\100\010\001\002\000\052\002" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065" +
    "\ufff2\066\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\100\ufff2" +
    "\001\002\000\004\002\000\001\002\000\040\013\075\017" +
    "\105\026\072\027\073\035\102\044\100\045\107\046\101" +
    "\047\077\050\070\051\106\052\103\053\076\067\074\070" +
    "\104\001\002\000\004\036\212\001\002\000\004\041\213" +
    "\001\002\000\046\043\036\044\020\054\034\055\040\056" +
    "\024\057\023\060\015\061\022\062\016\063\014\064\035" +
    "\065\033\066\032\071\007\072\021\073\005\074\012\100" +
    "\010\001\002\000\050\042\215\043\036\044\020\054\034" +
    "\055\040\056\024\057\023\060\015\061\022\062\016\063" +
    "\014\064\035\065\033\066\032\071\007\072\021\073\005" +
    "\074\012\100\010\001\002\000\052\002\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\071" +
    "\ufff1\072\ufff1\073\ufff1\074\ufff1\100\ufff1\001\002\000\006" +
    "\032\uffdc\037\217\001\002\000\042\040\221\043\036\054" +
    "\034\055\040\056\024\057\023\060\015\061\022\062\016" +
    "\063\014\064\035\065\033\066\032\071\007\072\021\073" +
    "\005\001\002\000\042\040\224\043\036\054\034\055\040" +
    "\056\024\057\023\060\015\061\022\062\016\063\014\064" +
    "\035\065\033\066\032\071\007\072\021\073\005\001\002" +
    "\000\004\032\uffdb\001\002\000\004\032\223\001\002\000" +
    "\042\040\uffe3\043\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066" +
    "\uffe3\071\uffe3\072\uffe3\073\uffe3\001\002\000\004\032\uffda" +
    "\001\002\000\004\032\226\001\002\000\042\040\uffe4\043" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\071\uffe4\072" +
    "\uffe4\073\uffe4\001\002\000\004\045\233\001\002\000\006" +
    "\030\231\032\uffde\001\002\000\040\013\075\017\105\026" +
    "\072\027\073\035\102\044\100\045\107\046\101\047\077" +
    "\050\070\051\106\052\103\053\076\067\074\070\104\001" +
    "\002\000\004\032\uffdd\001\002\000\004\040\234\001\002" +
    "\000\004\044\235\001\002\000\006\030\236\032\uffd9\001" +
    "\002\000\006\041\237\053\241\001\002\000\030\042\uffd1" +
    "\044\242\045\107\046\101\047\077\050\070\051\106\052" +
    "\103\053\076\067\074\070\104\001\002\000\004\032\uffd8" +
    "\001\002\000\004\032\uffd3\001\002\000\006\031\uffcd\042" +
    "\uffcd\001\002\000\006\031\uffce\042\uffce\001\002\000\006" +
    "\031\247\042\uffcf\001\002\000\004\042\246\001\002\000" +
    "\004\032\uffd4\001\002\000\026\044\242\045\107\046\101" +
    "\047\077\050\070\051\106\052\103\053\076\067\074\070" +
    "\104\001\002\000\004\042\uffd2\001\002\000\006\031\247" +
    "\042\uffcf\001\002\000\004\042\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\032\002\010\003\040\005\016\010\026\017" +
    "\030\021\005\024\012\025\024\026\036\027\027\032\025" +
    "\044\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\041\010\026\017\030\021\005" +
    "\024\012\025\024\026\036\027\027\032\025\044\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\033\066\034\065\035\064\036" +
    "\063\037\062\040\061\041\060\042\057\043\070\001\001" +
    "\000\006\014\047\016\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\053\001\001\000\004\016\054" +
    "\001\001\000\002\001\001\000\004\015\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\041\114\042" +
    "\057\043\070\001\001\000\010\041\113\042\057\043\070" +
    "\001\001\000\002\001\001\000\010\041\112\042\057\043" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\033\110\034\065\035" +
    "\064\036\063\037\062\040\061\041\060\042\057\043\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\035" +
    "\107\036\063\037\062\040\061\041\060\042\057\043\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\033\124\034" +
    "\065\035\064\036\063\037\062\040\061\041\060\042\057" +
    "\043\070\001\001\000\024\033\123\034\065\035\064\036" +
    "\063\037\062\040\061\041\060\042\057\043\070\001\001" +
    "\000\024\033\122\034\065\035\064\036\063\037\062\040" +
    "\061\041\060\042\057\043\070\001\001\000\024\033\121" +
    "\034\065\035\064\036\063\037\062\040\061\041\060\042" +
    "\057\043\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\035\134\036" +
    "\063\037\062\040\061\041\060\042\057\043\070\001\001" +
    "\000\020\035\133\036\063\037\062\040\061\041\060\042" +
    "\057\043\070\001\001\000\020\035\132\036\063\037\062" +
    "\040\061\041\060\042\057\043\070\001\001\000\020\035" +
    "\131\036\063\037\062\040\061\041\060\042\057\043\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\036\140\037\062\040\061" +
    "\041\060\042\057\043\070\001\001\000\016\036\137\037" +
    "\062\040\061\041\060\042\057\043\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\037\146\040\061\041" +
    "\060\042\057\043\070\001\001\000\014\037\145\040\061" +
    "\041\060\042\057\043\070\001\001\000\014\037\144\040" +
    "\061\041\060\042\057\043\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\040\154\041" +
    "\060\042\057\043\070\001\001\000\012\040\153\041\060" +
    "\042\057\043\070\001\001\000\012\040\152\041\060\042" +
    "\057\043\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\033\160\034\065\035\064\036\063\037\062\040\061" +
    "\041\060\042\057\043\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\163\005\164\010\026\017\030" +
    "\021\005\024\012\025\024\026\036\027\027\032\025\044" +
    "\003\001\001\000\026\005\166\010\026\017\030\021\005" +
    "\024\012\025\024\026\036\027\027\032\025\044\003\001" +
    "\001\000\002\001\001\000\004\022\167\001\001\000\002" +
    "\001\001\000\004\023\200\001\001\000\002\001\001\000" +
    "\024\033\172\034\065\035\064\036\063\037\062\040\061" +
    "\041\060\042\057\043\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\175\005\164\010\026\017\030" +
    "\021\005\024\012\025\024\026\036\027\027\032\025\044" +
    "\003\001\001\000\026\005\166\010\026\017\030\021\005" +
    "\024\012\025\024\026\036\027\027\032\025\044\003\001" +
    "\001\000\004\022\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\204\005\164\010\026\017\030\021\005\024\012\025\024" +
    "\026\036\027\027\032\025\044\003\001\001\000\026\005" +
    "\166\010\026\017\030\021\005\024\012\025\024\026\036" +
    "\027\027\032\025\044\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\033\210\034\065\035\064\036\063" +
    "\037\062\040\061\041\060\042\057\043\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\213\005\164" +
    "\010\026\017\030\021\005\024\012\025\024\026\036\027" +
    "\027\032\025\044\003\001\001\000\026\005\166\010\026" +
    "\017\030\021\005\024\012\025\024\026\036\027\027\032" +
    "\025\044\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\217\010\221\025\024\026\036\027\027\044" +
    "\003\001\001\000\014\010\224\025\024\026\036\027\027" +
    "\044\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\033" +
    "\231\034\065\035\064\036\063\037\062\040\061\041\060" +
    "\042\057\043\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\237" +
    "\001\001\000\010\043\242\045\244\047\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\242\047\250\001\001\000\002" +
    "\001\001\000\004\046\251\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= INSTRUCTION_OR_FUNCTION 
            {
              ArrayList<Instruction> RESULT =null;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Is; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		ArrayList<Instruction> start_val = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTION_OR_FUNCTION ::= INSTRUCTION 
            {
              ArrayList<Instruction> RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 ArrayList<Instruction> instrs = new ArrayList<Instruction>();
                               instrs.add(Val_I);
                               RESULT = instrs;
                            
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OR_FUNCTION",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTION_OR_FUNCTION ::= INSTRUCTION_OR_FUNCTION INSTRUCTION 
            {
              ArrayList<Instruction> RESULT =null;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 Val_Is.add(Val_I);
                               RESULT = Val_Is;
                            
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OR_FUNCTION",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              ArrayList<Instruction> RESULT =null;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 Val_Is.add(Val_I);
                    RESULT = Val_Is;
                 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTIONS ::= INSTRUCTION 
            {
              ArrayList<Instruction> RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 ArrayList<Instruction> instrs = new ArrayList<Instruction>();
                    instrs.add(Val_I);
                    RESULT = instrs;
                 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= WHILE_LOOP 
            {
              Instruction RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_I; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= DECLARATION SEMI_COLON 
            {
              Instruction RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= F_CALL SEMI_COLON 
            {
              Instruction RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= Sif0 
            {
              Instruction RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= ASSIGNATION SEMI_COLON 
            {
              Instruction RESULT =null;
		Instruction Val_A = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = Val_A; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sif0 ::= IF PARENTH_OPEN EXP0 PARENTH_CLOSE CURLY_OPEN INSTRUCTIONS CURLY_CLOSE Sif1 Sif2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sif1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sif1 ::= ELSEIF PARENTH_OPEN EXP0 PARENTH_CLOSE CURLY_OPEN INSTRUCTIONS CURLY_CLOSE Sif1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sif2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sif2 ::= ELSE1 ELSE2 CURLY_OPEN INSTRUCTIONS CURLY_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // WHILE_LOOP ::= WHILE PARENTH_OPEN EXP0 PARENTH_CLOSE CURLY_OPEN INSTRUCTIONS CURLY_CLOSE 
            {
              Instruction RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new While(Val_Exp, Val_Is); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILE_LOOP",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // _FUNCTION ::= F_BODY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("_FUNCTION",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // _FUNCTION ::= F_HEADER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("_FUNCTION",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // F_PARAMETERS ::= F_PARAMETER MORE_F_PARAMETERS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_PARAMETERS",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // F_PARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_PARAMETERS",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MORE_F_PARAMETERS ::= COMA F_PARAMETER MORE_F_PARAMETERS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_F_PARAMETERS",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MORE_F_PARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_F_PARAMETERS",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // F_PARAMETER ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_PARAMETER",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // F_ARGUMENTS ::= F_ARGUMENT MORE_F_ARGUMENTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_ARGUMENTS",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // F_ARGUMENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_ARGUMENTS",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MORE_F_ARGUMENTS ::= COMA F_ARGUMENT MORE_F_ARGUMENTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_F_ARGUMENTS",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MORE_F_ARGUMENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_F_ARGUMENTS",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // F_ARGUMENT ::= IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_ARGUMENT",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARATIONS ::= DECLARATIONS DECLARATION SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARATIONS ::= DECLARATION SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATION ::= TYPEDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARATION ::= STRUCTDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARATION ::= ARRDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASSIGNATION ::= IDENTIFICATOR EQUALS EXP0 
            {
              Instruction RESULT =null;
		TokenValue Val_ID = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_EXP = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Assignation(Val_ID.lexema, Val_EXP); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPEDEC ::= TYPES IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEC",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPEDEC ::= TYPES IDENTIFICATOR EQUALS EXP0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEC",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRUCTDEC ::= STRUCT IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRUCTDEC ::= STRUCT IDENTIFICATOR BRACKET_OPEN BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRUCTDEC ::= STRUCT IDENTIFICATOR BRACKET_OPEN DECLARATIONS BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARRDEC ::= TYPES BRACKET_OPEN NUMBER_NAT BRACKET_CLOSE IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRDEC",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARRDEC ::= TYPES BRACKET_OPEN NUMBER_NAT BRACKET_CLOSE IDENTIFICATOR EQUALS ARRASSIGN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRDEC",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // F_HEADER ::= FUNCTION IDENTIFICATOR PARENTH_OPEN F_PARAMETERS PARENTH_CLOSE TYPE_IDENT TYPES SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_HEADER",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // F_BODY ::= FUNCTION IDENTIFICATOR PARENTH_OPEN F_PARAMETERS PARENTH_CLOSE TYPE_IDENT TYPES CURLY_OPEN INSTRUCTIONS CURLY_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_BODY",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // F_CALL ::= IDENTIFICATOR PARENTH_OPEN F_ARGUMENTS PARENTH_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_CALL",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARRASSIGN ::= CURLY_OPEN ARRCONTENTS CURLY_CLOSE 
            {
              Instruction RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRASSIGN",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARRASSIGN ::= RVAL_CHAR_ARR 
            {
              Instruction RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRASSIGN",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARRCONTENTS ::= ARRCONTENT MORE_ARRCONTENTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENTS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARRCONTENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENTS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MORE_ARRCONTENTS ::= COMA ARRCONTENT MORE_ARRCONTENTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARRCONTENTS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MORE_ARRCONTENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARRCONTENTS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARRCONTENT ::= VALUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENT",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARRCONTENT ::= IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENT",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP0 ::= EXP1 OPERATOR_BAND EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.BAND); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP0 ::= EXP1 OPERATOR_BOR EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.BOR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP0 ::= EXP1 OPERATOR_EQUAL EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.EQUAL); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP0 ::= EXP1 OPERATOR_NEQ EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.NEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP0 ::= EXP1 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp1; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP1 ::= OPERATOR_BNOT EXP2 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.BNOT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP1 ::= EXP2 
            {
              E RESULT =null;
		E Val_Exp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp2; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP2 ::= EXP3 OPERATOR_GT EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.GT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP2 ::= EXP3 OPERATOR_LT EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.LT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP2 ::= EXP3 OPERATOR_GEQ EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.GEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP2 ::= EXP3 OPERATOR_LEQ EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.LEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP2 ::= EXP3 
            {
              E RESULT =null;
		E Val_Exp3 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp3; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP3 ::= EXP4 OPERATOR_ADD EXP3 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.PLUS); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP3 ::= EXP4 OPERATOR_SUB EXP3 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MINUS); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP3 ::= EXP4 
            {
              E RESULT =null;
		E Val_Exp4 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp4; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP4 ::= EXP5 OPERATOR_MULT EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MULT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP4 ::= EXP5 OPERATOR_DIV EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.DIV); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP4 ::= EXP5 OPERATOR_MOD EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MOD); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP4 ::= EXP5 
            {
              E RESULT =null;
		E Val_Exp5 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp5; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP5 ::= EXP6 OPERATOR_AND EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.AND); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP5 ::= EXP6 OPERATOR_OR EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.OR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP5 ::= EXP6 OPERATOR_XOR EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.XOR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP5 ::= OPERATOR_NOT EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.NOT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP5 ::= EXP6 
            {
              E RESULT =null;
		E Val_Exp6 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp6; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP6 ::= OPERATOR_PP EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.PP_PRE); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP6 ::= OPERATOR_MM EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.MM_PRE); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP6 ::= EXP7 OPERATOR_PP 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new EUni(Val_Exp, UniOps.PP_POST); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP6 ::= EXP7 OPERATOR_MM 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new EUni(Val_Exp, UniOps.MM_POST); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP6 ::= EXP7 
            {
              E RESULT =null;
		E Val_Exp7 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp7; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP7 ::= VALUE 
            {
              E RESULT =null;
		Num Val = (Num)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP7 ::= IDENTIFICATOR 
            {
              E RESULT =null;
		TokenValue Val_ID = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Identificator(Val_ID.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP7 ::= PARENTH_OPEN EXP0 PARENTH_CLOSE 
            {
              E RESULT =null;
		E Val_EXP = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = Val_EXP; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALUE ::= NUMBER_NAT 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.UINT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALUE ::= NUMBER_INT 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.INT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALUE ::= NUMBER_FLOAT 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.FLOAT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALUE ::= NUMBER_BIN 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.UINT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALUE ::= NUMBER_HEX 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.UINT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALUE ::= RVAL_CHAR 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.CHAR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALUE ::= RVAL_CHAR_ARR 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.CHAR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALUE ::= TRUE_ 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.BOOL); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALUE ::= FALSE_ 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.BOOL); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TYPES ::= UINT8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TYPES ::= UINT16 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TYPES ::= UINT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TYPES ::= UINT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TYPES ::= INT8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TYPES ::= INT16 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TYPES ::= INT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TYPES ::= INT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TYPES ::= FLOAT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TYPES ::= FLOAT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TYPES ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TYPES ::= UCHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TYPES ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TYPES ::= VOID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

