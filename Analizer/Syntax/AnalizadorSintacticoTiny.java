
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Jan 23 18:49:41 CET 2025
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import lex.AnalizadorLexicoTiny;
import lex.UnidadLexica;
import lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Jan 23 18:49:41 CET 2025
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\006\005\000\002\006\004\000\002\004\004\000" +
    "\002\004\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\004\000\002\005\003\000\002\005\003\000\002\005" +
    "\004\000\002\005\003\000\002\005\004\000\002\021\012" +
    "\000\002\021\011\000\002\021\011\000\002\021\010\000" +
    "\002\022\003\000\002\022\012\000\002\022\011\000\002" +
    "\022\011\000\002\022\010\000\002\023\002\000\002\023" +
    "\007\000\002\023\006\000\002\024\011\000\002\025\013" +
    "\000\002\007\003\000\002\007\003\000\002\011\004\000" +
    "\002\011\002\000\002\012\005\000\002\012\002\000\002" +
    "\013\003\000\002\014\004\000\002\014\002\000\002\015" +
    "\005\000\002\015\002\000\002\016\003\000\002\010\005" +
    "\000\002\010\004\000\002\020\003\000\002\020\003\000" +
    "\002\017\005\000\002\026\004\000\002\026\006\000\002" +
    "\027\004\000\002\027\006\000\002\027\007\000\002\030" +
    "\005\000\002\030\007\000\002\031\012\000\002\032\014" +
    "\000\002\033\006\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\003\000\002" +
    "\035\004\000\002\035\003\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\003" +
    "\000\002\037\005\000\002\037\005\000\002\037\003\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\003\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\004\000\002\041\003\000\002\042\004" +
    "\000\002\042\004\000\002\042\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\004\000\002\043\005\000\002" +
    "\043\003\000\002\044\005\000\002\050\004\000\002\051" +
    "\005\000\002\051\002\000\002\045\006\000\002\045\005" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\104\013\055\017\064\026\041\027\044\035" +
    "\015\041\034\043\045\044\026\045\047\046\071\047\053" +
    "\050\033\051\072\052\011\053\063\054\052\055\046\056" +
    "\005\057\004\060\070\061\056\062\012\063\013\064\042" +
    "\065\043\066\021\067\020\070\022\071\006\072\065\074" +
    "\024\100\060\101\017\001\002\000\006\037\uff94\044\uff94" +
    "\001\002\000\006\037\uff95\044\uff95\001\002\000\006\037" +
    "\uff8d\044\uff8d\001\002\000\110\002\ufff3\013\ufff3\017\ufff3" +
    "\026\ufff3\027\ufff3\035\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3" +
    "\070\ufff3\071\ufff3\072\ufff3\074\ufff3\100\ufff3\101\ufff3\001" +
    "\002\000\004\002\267\001\002\000\160\002\uff9b\004\uff9b" +
    "\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\031" +
    "\uff9b\032\uff9b\035\uff9b\036\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066" +
    "\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\074\uff9b\100\uff9b" +
    "\101\uff9b\001\002\000\006\037\uff91\044\uff91\001\002\000" +
    "\006\037\uff90\044\uff90\001\002\000\110\002\uffff\013\uffff" +
    "\017\uffff\026\uffff\027\uffff\035\uffff\041\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff\060" +
    "\uffff\061\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff" +
    "\067\uffff\070\uffff\071\uffff\072\uffff\074\uffff\100\uffff\101" +
    "\uffff\001\002\000\042\013\055\017\064\026\041\027\044" +
    "\035\015\041\077\044\101\045\047\046\071\047\053\050" +
    "\033\051\072\052\011\053\063\067\020\070\022\001\002" +
    "\000\106\002\001\013\055\017\064\026\041\027\044\035" +
    "\015\041\034\043\045\044\026\045\047\046\071\047\053" +
    "\050\033\051\072\052\011\053\063\054\052\055\046\056" +
    "\005\057\004\060\070\061\056\062\012\063\013\064\042" +
    "\065\043\066\021\067\020\070\022\071\006\072\065\074" +
    "\024\100\060\101\017\001\002\000\004\035\255\001\002" +
    "\000\160\002\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\031\uff99\032\uff99\035\uff99\036\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046" +
    "\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063" +
    "\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99" +
    "\072\uff99\074\uff99\100\uff99\101\uff99\001\002\000\006\037" +
    "\uff8b\044\uff8b\001\002\000\160\002\uff98\004\uff98\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\031\uff98\032" +
    "\uff98\035\uff98\036\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052" +
    "\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98" +
    "\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067" +
    "\uff98\070\uff98\071\uff98\072\uff98\074\uff98\100\uff98\101\uff98" +
    "\001\002\000\110\002\ufff6\013\ufff6\017\ufff6\026\ufff6\027" +
    "\ufff6\035\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071" +
    "\ufff6\072\ufff6\074\ufff6\100\ufff6\101\ufff6\001\002\000\004" +
    "\035\207\001\002\000\160\002\uffac\004\uffac\005\uffac\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\031\uffac\032\uffac" +
    "\035\uffac\036\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061" +
    "\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac" +
    "\070\uffac\071\uffac\072\uffac\074\uffac\100\uffac\101\uffac\001" +
    "\002\000\054\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\014\uffaa\015\uffaa\016\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\030\205\031\uffaa" +
    "\032\uffaa\037\074\042\uffaa\001\002\000\112\002\uffd3\013" +
    "\uffd3\017\uffd3\026\uffd3\027\uffd3\032\uffd3\035\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\074\uffd3" +
    "\100\uffd3\101\uffd3\001\002\000\160\002\uffaf\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\200\011\177\012\201\013\uffaf" +
    "\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\031\uffaf" +
    "\032\uffaf\035\uffaf\036\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf" +
    "\067\uffaf\070\uffaf\071\uffaf\072\uffaf\074\uffaf\100\uffaf\101" +
    "\uffaf\001\002\000\152\002\uffb4\004\uffb4\005\uffb4\006\172" +
    "\007\173\013\uffb4\014\171\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\031\uffb4\032\uffb4\035\uffb4\036\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4" +
    "\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\074" +
    "\uffb4\100\uffb4\101\uffb4\001\002\000\144\002\uffb8\004\166" +
    "\005\165\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\031\uffb8\032\uffb8\035\uffb8\036\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\074\uffb8\100" +
    "\uffb8\101\uffb8\001\002\000\160\002\uff9d\004\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\031\uff9d\032" +
    "\uff9d\035\uff9d\036\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\071\uff9d\072\uff9d\074\uff9d\100\uff9d\101\uff9d" +
    "\001\002\000\106\013\055\017\064\026\041\027\044\035" +
    "\015\041\034\042\161\043\045\044\026\045\047\046\071" +
    "\047\053\050\033\051\072\052\011\053\063\054\052\055" +
    "\046\056\005\057\004\060\070\061\056\062\012\063\013" +
    "\064\042\065\043\066\021\067\020\070\022\071\006\072" +
    "\065\074\024\100\060\101\017\001\002\000\140\002\uffbb" +
    "\013\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\151\023\147\024\150\025\152\026\uffbb\027\uffbb\031\uffbb" +
    "\032\uffbb\035\uffbb\036\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\072\uffbb\074\uffbb\100\uffbb\101" +
    "\uffbb\001\002\000\130\002\uffc0\013\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\026\uffc0\027\uffc0\031\uffc0\032" +
    "\uffc0\035\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067" +
    "\uffc0\070\uffc0\071\uffc0\072\uffc0\074\uffc0\100\uffc0\101\uffc0" +
    "\001\002\000\130\002\uffc2\013\uffc2\015\140\016\142\017" +
    "\uffc2\020\137\021\141\026\uffc2\027\uffc2\031\uffc2\032\uffc2" +
    "\035\uffc2\036\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2" +
    "\070\uffc2\071\uffc2\072\uffc2\074\uffc2\100\uffc2\101\uffc2\001" +
    "\002\000\004\032\136\001\002\000\036\026\041\027\044" +
    "\035\015\041\077\044\101\045\047\046\071\047\053\050" +
    "\033\051\072\052\011\053\063\067\020\070\022\001\002" +
    "\000\006\037\uff8f\044\uff8f\001\002\000\006\037\uff8e\044" +
    "\uff8e\001\002\000\036\026\041\027\044\035\015\041\077" +
    "\044\101\045\047\046\071\047\053\050\033\051\072\052" +
    "\011\053\063\067\020\070\022\001\002\000\006\037\uff8a" +
    "\044\uff8a\001\002\000\006\037\uff96\044\uff96\001\002\000" +
    "\160\002\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\031\uffa0\032\uffa0\035\uffa0\036\uffa0\040" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072" +
    "\uffa0\074\uffa0\100\uffa0\101\uffa0\001\002\000\112\002\ufff4" +
    "\013\ufff4\017\ufff4\026\ufff4\027\ufff4\032\133\035\ufff4\041" +
    "\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\074" +
    "\ufff4\100\ufff4\101\ufff4\001\002\000\112\002\uffd2\013\uffd2" +
    "\017\uffd2\026\uffd2\027\uffd2\032\uffd2\035\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\074\uffd2\100" +
    "\uffd2\101\uffd2\001\002\000\006\037\uff97\044\uff97\001\002" +
    "\000\160\002\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\031\uff9e\032\uff9e\035\uff9e\036\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e" +
    "\072\uff9e\074\uff9e\100\uff9e\101\uff9e\001\002\000\110\002" +
    "\ufff7\013\ufff7\017\ufff7\026\ufff7\027\ufff7\035\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\074\ufff7" +
    "\100\ufff7\101\ufff7\001\002\000\036\026\041\027\044\035" +
    "\015\041\077\044\101\045\047\046\071\047\053\050\033" +
    "\051\072\052\011\053\063\067\020\070\022\001\002\000" +
    "\006\037\uff92\044\uff92\001\002\000\112\002\ufff1\013\ufff1" +
    "\017\ufff1\026\ufff1\027\ufff1\032\131\035\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\074\ufff1\100" +
    "\ufff1\101\ufff1\001\002\000\004\035\121\001\002\000\160" +
    "\002\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\031\uffa7\032\uffa7\035\uffa7\036\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064" +
    "\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7" +
    "\074\uffa7\100\uffa7\101\uffa7\001\002\000\110\002\ufffe\013" +
    "\ufffe\017\ufffe\026\ufffe\027\ufffe\035\ufffe\041\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066" +
    "\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\074\ufffe\100\ufffe" +
    "\101\ufffe\001\002\000\160\002\uff9a\004\uff9a\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a" +
    "\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023" +
    "\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\031\uff9a\032\uff9a" +
    "\035\uff9a\036\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a" +
    "\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061" +
    "\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a" +
    "\070\uff9a\071\uff9a\072\uff9a\074\uff9a\100\uff9a\101\uff9a\001" +
    "\002\000\040\013\055\026\041\027\044\035\015\041\077" +
    "\044\101\045\047\046\071\047\053\050\033\051\072\052" +
    "\011\053\063\067\020\070\022\001\002\000\006\037\uff8c" +
    "\044\uff8c\001\002\000\160\002\uffab\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\031\uffab\032\uffab" +
    "\035\uffab\036\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab" +
    "\070\uffab\071\uffab\072\uffab\074\uffab\100\uffab\101\uffab\001" +
    "\002\000\006\037\074\044\075\001\002\000\006\037\uff93" +
    "\044\uff93\001\002\000\160\002\uff9f\004\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\031\uff9f\032\uff9f" +
    "\035\uff9f\036\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f" +
    "\070\uff9f\071\uff9f\072\uff9f\074\uff9f\100\uff9f\101\uff9f\001" +
    "\002\000\160\002\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c" +
    "\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016" +
    "\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\026\uff9c\027\uff9c\031\uff9c\032\uff9c\035\uff9c\036" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\074\uff9c\100\uff9c\101\uff9c\001\002\000\004" +
    "\044\115\001\002\000\042\013\055\017\064\026\041\027" +
    "\044\035\015\041\077\044\101\045\047\046\071\047\053" +
    "\050\033\051\072\052\011\053\063\067\020\070\022\001" +
    "\002\000\114\002\uffd0\013\uffd0\017\uffd0\026\uffd0\027\uffd0" +
    "\030\076\032\uffd0\035\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\070\uffd0\071\uffd0\072\uffd0\074\uffd0\100\uffd0\101\uffd0\001" +
    "\002\000\042\013\055\017\064\026\041\027\044\035\015" +
    "\041\077\044\101\045\047\046\071\047\053\050\033\051" +
    "\072\052\011\053\063\067\020\070\022\001\002\000\042" +
    "\013\055\017\064\026\041\027\044\035\015\041\077\044" +
    "\101\045\047\046\071\047\053\050\033\051\072\052\011" +
    "\053\063\067\020\070\022\001\002\000\112\002\uffcf\013" +
    "\uffcf\017\uffcf\026\uffcf\027\uffcf\032\uffcf\035\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\074\uffcf" +
    "\100\uffcf\101\uffcf\001\002\000\162\002\uffaa\004\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\031\uffaa" +
    "\032\uffaa\035\uffaa\036\uffaa\037\074\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa" +
    "\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\074\uffaa\100" +
    "\uffaa\101\uffaa\001\002\000\160\002\uffa9\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\031\uffa9\032" +
    "\uffa9\035\uffa9\036\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\071\uffa9\072\uffa9\074\uffa9\100\uffa9\101\uffa9" +
    "\001\002\000\006\031\106\042\uffa3\001\002\000\004\042" +
    "\105\001\002\000\160\002\uffa6\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\027\uffa6\031\uffa6\032\uffa6\035" +
    "\uffa6\036\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070" +
    "\uffa6\071\uffa6\072\uffa6\074\uffa6\100\uffa6\101\uffa6\001\002" +
    "\000\042\013\055\017\064\026\041\027\044\035\015\041" +
    "\077\044\101\045\047\046\071\047\053\050\033\051\072" +
    "\052\011\053\063\067\020\070\022\001\002\000\004\042" +
    "\uffa5\001\002\000\006\031\106\042\uffa3\001\002\000\004" +
    "\042\uffa4\001\002\000\004\040\113\001\002\000\162\002" +
    "\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1" +
    "\027\uffa1\031\uffa1\032\uffa1\035\uffa1\036\uffa1\037\074\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072" +
    "\uffa1\074\uffa1\100\uffa1\101\uffa1\001\002\000\160\002\uffa2" +
    "\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\031\uffa2\032\uffa2\035\uffa2\036\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\074\uffa2" +
    "\100\uffa2\101\uffa2\001\002\000\114\002\uffcb\013\uffcb\017" +
    "\uffcb\026\uffcb\027\uffcb\030\116\032\uffcb\035\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\074\uffcb" +
    "\100\uffcb\101\uffcb\001\002\000\004\041\077\001\002\000" +
    "\112\002\uffca\013\uffca\017\uffca\026\uffca\027\uffca\032\uffca" +
    "\035\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca" +
    "\072\uffca\074\uffca\100\uffca\101\uffca\001\002\000\130\002" +
    "\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\026\uffc1\027\uffc1\031\uffc1\032\uffc1\035\uffc1\036\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072" +
    "\uffc1\074\uffc1\100\uffc1\101\uffc1\001\002\000\042\013\055" +
    "\017\064\026\041\027\044\035\015\041\077\044\101\045" +
    "\047\046\071\047\053\050\033\051\072\052\011\053\063" +
    "\067\020\070\022\001\002\000\004\036\123\001\002\000" +
    "\004\041\124\001\002\000\104\013\055\017\064\026\041" +
    "\027\044\035\015\041\077\043\045\044\026\045\047\046" +
    "\071\047\053\050\033\051\072\052\011\053\063\054\052" +
    "\055\046\056\005\057\004\060\070\061\056\062\012\063" +
    "\013\064\042\065\043\066\021\067\020\070\022\071\006" +
    "\072\065\074\024\100\060\101\017\001\002\000\106\013" +
    "\055\017\064\026\041\027\044\035\015\041\077\042\130" +
    "\043\045\044\026\045\047\046\071\047\053\050\033\051" +
    "\072\052\011\053\063\054\052\055\046\056\005\057\004" +
    "\060\070\061\056\062\012\063\013\064\042\065\043\066" +
    "\021\067\020\070\022\071\006\072\065\074\024\100\060" +
    "\101\017\001\002\000\106\013\ufff8\017\ufff8\026\ufff8\027" +
    "\ufff8\035\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071" +
    "\ufff8\072\ufff8\074\ufff8\100\ufff8\101\ufff8\001\002\000\106" +
    "\013\ufff9\017\ufff9\026\ufff9\027\ufff9\035\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\074\ufff9\100" +
    "\ufff9\101\ufff9\001\002\000\110\002\uffe3\013\uffe3\017\uffe3" +
    "\026\uffe3\027\uffe3\035\uffe3\041\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\070\uffe3\071\uffe3\072\uffe3\074\uffe3\100\uffe3\101\uffe3\001" +
    "\002\000\110\002\ufff2\013\ufff2\017\ufff2\026\ufff2\027\ufff2" +
    "\035\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2" +
    "\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2" +
    "\072\ufff2\074\ufff2\100\ufff2\101\ufff2\001\002\000\152\002" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\031\uffb0\032\uffb0" +
    "\035\uffb0\036\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\074\uffb0\100\uffb0\101\uffb0\001" +
    "\002\000\110\002\ufff5\013\ufff5\017\ufff5\026\ufff5\027\ufff5" +
    "\035\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\072\ufff5\074\ufff5\100\ufff5\101\ufff5\001\002\000\160\002" +
    "\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\031\uffad\032\uffad\035\uffad\036\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad" +
    "\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\074" +
    "\uffad\100\uffad\101\uffad\001\002\000\160\002\uffae\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\031" +
    "\uffae\032\uffae\035\uffae\036\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\074\uffae\100\uffae" +
    "\101\uffae\001\002\000\110\002\ufff0\013\ufff0\017\ufff0\026" +
    "\ufff0\027\ufff0\035\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070" +
    "\ufff0\071\ufff0\072\ufff0\074\ufff0\100\ufff0\101\ufff0\001\002" +
    "\000\042\013\055\017\064\026\041\027\044\035\015\041" +
    "\077\044\101\045\047\046\071\047\053\050\033\051\072" +
    "\052\011\053\063\067\020\070\022\001\002\000\042\013" +
    "\055\017\064\026\041\027\044\035\015\041\077\044\101" +
    "\045\047\046\071\047\053\050\033\051\072\052\011\053" +
    "\063\067\020\070\022\001\002\000\042\013\055\017\064" +
    "\026\041\027\044\035\015\041\077\044\101\045\047\046" +
    "\071\047\053\050\033\051\072\052\011\053\063\067\020" +
    "\070\022\001\002\000\042\013\055\017\064\026\041\027" +
    "\044\035\015\041\077\044\101\045\047\046\071\047\053" +
    "\050\033\051\072\052\011\053\063\067\020\070\022\001" +
    "\002\000\120\002\uffc5\013\uffc5\017\uffc5\026\uffc5\027\uffc5" +
    "\031\uffc5\032\uffc5\035\uffc5\036\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\074\uffc5\100" +
    "\uffc5\101\uffc5\001\002\000\120\002\uffc3\013\uffc3\017\uffc3" +
    "\026\uffc3\027\uffc3\031\uffc3\032\uffc3\035\uffc3\036\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072" +
    "\uffc3\074\uffc3\100\uffc3\101\uffc3\001\002\000\120\002\uffc6" +
    "\013\uffc6\017\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\035" +
    "\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070" +
    "\uffc6\071\uffc6\072\uffc6\074\uffc6\100\uffc6\101\uffc6\001\002" +
    "\000\120\002\uffc4\013\uffc4\017\uffc4\026\uffc4\027\uffc4\031" +
    "\uffc4\032\uffc4\035\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\074\uffc4\100\uffc4" +
    "\101\uffc4\001\002\000\040\013\055\026\041\027\044\035" +
    "\015\041\077\044\101\045\047\046\071\047\053\050\033" +
    "\051\072\052\011\053\063\067\020\070\022\001\002\000" +
    "\040\013\055\026\041\027\044\035\015\041\077\044\101" +
    "\045\047\046\071\047\053\050\033\051\072\052\011\053" +
    "\063\067\020\070\022\001\002\000\040\013\055\026\041" +
    "\027\044\035\015\041\077\044\101\045\047\046\071\047" +
    "\053\050\033\051\072\052\011\053\063\067\020\070\022" +
    "\001\002\000\040\013\055\026\041\027\044\035\015\041" +
    "\077\044\101\045\047\046\071\047\053\050\033\051\072" +
    "\052\011\053\063\067\020\070\022\001\002\000\130\002" +
    "\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\026\uffbc\027\uffbc\031\uffbc\032\uffbc\035\uffbc\036\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072" +
    "\uffbc\074\uffbc\100\uffbc\101\uffbc\001\002\000\130\002\uffbf" +
    "\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\026" +
    "\uffbf\027\uffbf\031\uffbf\032\uffbf\035\uffbf\036\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf" +
    "\074\uffbf\100\uffbf\101\uffbf\001\002\000\130\002\uffbd\013" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\026\uffbd" +
    "\027\uffbd\031\uffbd\032\uffbd\035\uffbd\036\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\074" +
    "\uffbd\100\uffbd\101\uffbd\001\002\000\130\002\uffbe\013\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\026\uffbe\027" +
    "\uffbe\031\uffbe\032\uffbe\035\uffbe\036\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\074\uffbe" +
    "\100\uffbe\101\uffbe\001\002\000\106\013\055\017\064\026" +
    "\041\027\044\035\015\041\034\042\164\043\045\044\026" +
    "\045\047\046\071\047\053\050\033\051\072\052\011\053" +
    "\063\054\052\055\046\056\005\057\004\060\070\061\056" +
    "\062\012\063\013\064\042\065\043\066\021\067\020\070" +
    "\022\071\006\072\065\074\024\100\060\101\017\001\002" +
    "\000\010\031\106\032\136\042\uffa3\001\002\000\110\002" +
    "\ufffa\013\ufffa\017\ufffa\026\ufffa\027\ufffa\035\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\074\ufffa" +
    "\100\ufffa\101\ufffa\001\002\000\110\002\ufffd\013\ufffd\017" +
    "\ufffd\026\ufffd\027\ufffd\035\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\070\ufffd\071\ufffd\072\ufffd\074\ufffd\100\ufffd\101\ufffd" +
    "\001\002\000\110\002\ufffc\013\ufffc\017\ufffc\026\ufffc\027" +
    "\ufffc\035\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054" +
    "\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\072\ufffc\074\ufffc\100\ufffc\101\ufffc\001\002\000\110" +
    "\002\ufffb\013\ufffb\017\ufffb\026\ufffb\027\ufffb\035\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\074" +
    "\ufffb\100\ufffb\101\ufffb\001\002\000\040\013\055\026\041" +
    "\027\044\035\015\041\077\044\101\045\047\046\071\047" +
    "\053\050\033\051\072\052\011\053\063\067\020\070\022" +
    "\001\002\000\040\013\055\026\041\027\044\035\015\041" +
    "\077\044\101\045\047\046\071\047\053\050\033\051\072" +
    "\052\011\053\063\067\020\070\022\001\002\000\140\002" +
    "\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\031" +
    "\uffba\032\uffba\035\uffba\036\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\067\uffba\070\uffba\071\uffba\072\uffba\074\uffba\100\uffba" +
    "\101\uffba\001\002\000\140\002\uffb9\013\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\031\uffb9\032\uffb9\035\uffb9\036" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\072\uffb9\074\uffb9\100\uffb9\101\uffb9\001\002\000\040" +
    "\013\055\026\041\027\044\035\015\041\077\044\101\045" +
    "\047\046\071\047\053\050\033\051\072\052\011\053\063" +
    "\067\020\070\022\001\002\000\040\013\055\026\041\027" +
    "\044\035\015\041\077\044\101\045\047\046\071\047\053" +
    "\050\033\051\072\052\011\053\063\067\020\070\022\001" +
    "\002\000\040\013\055\026\041\027\044\035\015\041\077" +
    "\044\101\045\047\046\071\047\053\050\033\051\072\052" +
    "\011\053\063\067\020\070\022\001\002\000\144\002\uffb6" +
    "\004\uffb6\005\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\031\uffb6\032\uffb6\035\uffb6\036\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\074" +
    "\uffb6\100\uffb6\101\uffb6\001\002\000\144\002\uffb7\004\uffb7" +
    "\005\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\031\uffb7\032\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\074\uffb7\100" +
    "\uffb7\101\uffb7\001\002\000\144\002\uffb5\004\uffb5\005\uffb5" +
    "\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\031\uffb5" +
    "\032\uffb5\035\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\070\uffb5\071\uffb5\072\uffb5\074\uffb5\100\uffb5\101" +
    "\uffb5\001\002\000\040\013\055\026\041\027\044\035\015" +
    "\041\077\044\101\045\047\046\071\047\053\050\033\051" +
    "\072\052\011\053\063\067\020\070\022\001\002\000\040" +
    "\013\055\026\041\027\044\035\015\041\077\044\101\045" +
    "\047\046\071\047\053\050\033\051\072\052\011\053\063" +
    "\067\020\070\022\001\002\000\040\013\055\026\041\027" +
    "\044\035\015\041\077\044\101\045\047\046\071\047\053" +
    "\050\033\051\072\052\011\053\063\067\020\070\022\001" +
    "\002\000\152\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\031\uffb1\032\uffb1\035\uffb1\036\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\074\uffb1\100" +
    "\uffb1\101\uffb1\001\002\000\152\002\uffb3\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\031\uffb3\032\uffb3\035\uffb3\036\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072" +
    "\uffb3\074\uffb3\100\uffb3\101\uffb3\001\002\000\152\002\uffb2" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\031\uffb2\032\uffb2\035" +
    "\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070" +
    "\uffb2\071\uffb2\072\uffb2\074\uffb2\100\uffb2\101\uffb2\001\002" +
    "\000\042\013\055\017\064\026\041\027\044\035\015\041" +
    "\077\044\101\045\047\046\071\047\053\050\033\051\072" +
    "\052\011\053\063\067\020\070\022\001\002\000\112\002" +
    "\uffd1\013\uffd1\017\uffd1\026\uffd1\027\uffd1\032\uffd1\035\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1" +
    "\074\uffd1\100\uffd1\101\uffd1\001\002\000\042\013\055\017" +
    "\064\026\041\027\044\035\015\041\077\044\101\045\047" +
    "\046\071\047\053\050\033\051\072\052\011\053\063\067" +
    "\020\070\022\001\002\000\006\036\212\041\211\001\002" +
    "\000\106\013\055\017\064\026\041\027\044\035\015\041" +
    "\077\042\251\043\045\044\026\045\047\046\071\047\053" +
    "\050\033\051\072\052\011\053\063\054\052\055\046\056" +
    "\005\057\004\060\070\061\056\062\012\063\013\064\042" +
    "\065\043\066\021\067\020\070\022\071\006\072\065\074" +
    "\024\100\060\101\017\001\002\000\004\041\213\001\002" +
    "\000\106\013\055\017\064\026\041\027\044\035\015\041" +
    "\077\042\215\043\045\044\026\045\047\046\071\047\053" +
    "\050\033\051\072\052\011\053\063\054\052\055\046\056" +
    "\005\057\004\060\070\061\056\062\012\063\013\064\042" +
    "\065\043\066\021\067\020\070\022\071\006\072\065\074" +
    "\024\100\060\101\017\001\002\000\106\013\055\017\064" +
    "\026\041\027\044\035\015\041\077\042\246\043\045\044" +
    "\026\045\047\046\071\047\053\050\033\051\072\052\011" +
    "\053\063\054\052\055\046\056\005\057\004\060\070\061" +
    "\056\062\012\063\013\064\042\065\043\066\021\067\020" +
    "\070\022\071\006\072\065\074\024\100\060\101\017\001" +
    "\002\000\114\002\uffe6\013\uffe6\017\uffe6\026\uffe6\027\uffe6" +
    "\035\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6" +
    "\072\uffe6\074\uffe6\075\220\076\221\100\uffe6\101\uffe6\001" +
    "\002\000\110\002\uffeb\013\uffeb\017\uffeb\026\uffeb\027\uffeb" +
    "\035\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb" +
    "\072\uffeb\074\uffeb\100\uffeb\101\uffeb\001\002\000\110\002" +
    "\uffed\013\uffed\017\uffed\026\uffed\027\uffed\035\uffed\041\uffed" +
    "\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\074\uffed" +
    "\100\uffed\101\uffed\001\002\000\004\035\227\001\002\000" +
    "\004\077\222\001\002\000\004\041\223\001\002\000\106" +
    "\013\055\017\064\026\041\027\044\035\015\041\077\042" +
    "\225\043\045\044\026\045\047\046\071\047\053\050\033" +
    "\051\072\052\011\053\063\054\052\055\046\056\005\057" +
    "\004\060\070\061\056\062\012\063\013\064\042\065\043" +
    "\066\021\067\020\070\022\071\006\072\065\074\024\100" +
    "\060\101\017\001\002\000\106\013\055\017\064\026\041" +
    "\027\044\035\015\041\077\042\226\043\045\044\026\045" +
    "\047\046\071\047\053\050\033\051\072\052\011\053\063" +
    "\054\052\055\046\056\005\057\004\060\070\061\056\062" +
    "\012\063\013\064\042\065\043\066\021\067\020\070\022" +
    "\071\006\072\065\074\024\100\060\101\017\001\002\000" +
    "\110\002\uffe4\013\uffe4\017\uffe4\026\uffe4\027\uffe4\035\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064" +
    "\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4" +
    "\074\uffe4\100\uffe4\101\uffe4\001\002\000\110\002\uffe5\013" +
    "\uffe5\017\uffe5\026\uffe5\027\uffe5\035\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066" +
    "\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\074\uffe5\100\uffe5" +
    "\101\uffe5\001\002\000\042\013\055\017\064\026\041\027" +
    "\044\035\015\041\077\044\101\045\047\046\071\047\053" +
    "\050\033\051\072\052\011\053\063\067\020\070\022\001" +
    "\002\000\006\036\232\041\231\001\002\000\106\013\055" +
    "\017\064\026\041\027\044\035\015\041\077\042\242\043" +
    "\045\044\026\045\047\046\071\047\053\050\033\051\072" +
    "\052\011\053\063\054\052\055\046\056\005\057\004\060" +
    "\070\061\056\062\012\063\013\064\042\065\043\066\021" +
    "\067\020\070\022\071\006\072\065\074\024\100\060\101" +
    "\017\001\002\000\004\041\233\001\002\000\106\013\055" +
    "\017\064\026\041\027\044\035\015\041\077\042\235\043" +
    "\045\044\026\045\047\046\071\047\053\050\033\051\072" +
    "\052\011\053\063\054\052\055\046\056\005\057\004\060" +
    "\070\061\056\062\012\063\013\064\042\065\043\066\021" +
    "\067\020\070\022\071\006\072\065\074\024\100\060\101" +
    "\017\001\002\000\106\013\055\017\064\026\041\027\044" +
    "\035\015\041\077\042\237\043\045\044\026\045\047\046" +
    "\071\047\053\050\033\051\072\052\011\053\063\054\052" +
    "\055\046\056\005\057\004\060\070\061\056\062\012\063" +
    "\013\064\042\065\043\066\021\067\020\070\022\071\006" +
    "\072\065\074\024\100\060\101\017\001\002\000\114\002" +
    "\uffe6\013\uffe6\017\uffe6\026\uffe6\027\uffe6\035\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\074\uffe6" +
    "\075\220\076\221\100\uffe6\101\uffe6\001\002\000\110\002" +
    "\uffe8\013\uffe8\017\uffe8\026\uffe8\027\uffe8\035\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\074\uffe8" +
    "\100\uffe8\101\uffe8\001\002\000\114\002\uffe6\013\uffe6\017" +
    "\uffe6\026\uffe6\027\uffe6\035\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067" +
    "\uffe6\070\uffe6\071\uffe6\072\uffe6\074\uffe6\075\220\076\221" +
    "\100\uffe6\101\uffe6\001\002\000\110\002\uffea\013\uffea\017" +
    "\uffea\026\uffea\027\uffea\035\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea" +
    "\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067" +
    "\uffea\070\uffea\071\uffea\072\uffea\074\uffea\100\uffea\101\uffea" +
    "\001\002\000\106\013\055\017\064\026\041\027\044\035" +
    "\015\041\077\042\244\043\045\044\026\045\047\046\071" +
    "\047\053\050\033\051\072\052\011\053\063\054\052\055" +
    "\046\056\005\057\004\060\070\061\056\062\012\063\013" +
    "\064\042\065\043\066\021\067\020\070\022\071\006\072" +
    "\065\074\024\100\060\101\017\001\002\000\114\002\uffe6" +
    "\013\uffe6\017\uffe6\026\uffe6\027\uffe6\035\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\074\uffe6\075" +
    "\220\076\221\100\uffe6\101\uffe6\001\002\000\110\002\uffe7" +
    "\013\uffe7\017\uffe7\026\uffe7\027\uffe7\035\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\074\uffe7\100" +
    "\uffe7\101\uffe7\001\002\000\114\002\uffe6\013\uffe6\017\uffe6" +
    "\026\uffe6\027\uffe6\035\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061" +
    "\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6" +
    "\070\uffe6\071\uffe6\072\uffe6\074\uffe6\075\220\076\221\100" +
    "\uffe6\101\uffe6\001\002\000\110\002\uffe9\013\uffe9\017\uffe9" +
    "\026\uffe9\027\uffe9\035\uffe9\041\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9" +
    "\070\uffe9\071\uffe9\072\uffe9\074\uffe9\100\uffe9\101\uffe9\001" +
    "\002\000\114\002\uffe6\013\uffe6\017\uffe6\026\uffe6\027\uffe6" +
    "\035\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6" +
    "\072\uffe6\074\uffe6\075\220\076\221\100\uffe6\101\uffe6\001" +
    "\002\000\110\002\uffef\013\uffef\017\uffef\026\uffef\027\uffef" +
    "\035\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063" +
    "\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef" +
    "\072\uffef\074\uffef\100\uffef\101\uffef\001\002\000\106\013" +
    "\055\017\064\026\041\027\044\035\015\041\077\042\253" +
    "\043\045\044\026\045\047\046\071\047\053\050\033\051" +
    "\072\052\011\053\063\054\052\055\046\056\005\057\004" +
    "\060\070\061\056\062\012\063\013\064\042\065\043\066" +
    "\021\067\020\070\022\071\006\072\065\074\024\100\060" +
    "\101\017\001\002\000\114\002\uffe6\013\uffe6\017\uffe6\026" +
    "\uffe6\027\uffe6\035\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\071\uffe6\072\uffe6\074\uffe6\075\220\076\221\100\uffe6" +
    "\101\uffe6\001\002\000\110\002\uffec\013\uffec\017\uffec\026" +
    "\uffec\027\uffec\035\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec" +
    "\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070" +
    "\uffec\071\uffec\072\uffec\074\uffec\100\uffec\101\uffec\001\002" +
    "\000\114\002\uffe6\013\uffe6\017\uffe6\026\uffe6\027\uffe6\035" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072" +
    "\uffe6\074\uffe6\075\220\076\221\100\uffe6\101\uffe6\001\002" +
    "\000\110\002\uffee\013\uffee\017\uffee\026\uffee\027\uffee\035" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072" +
    "\uffee\074\uffee\100\uffee\101\uffee\001\002\000\042\013\055" +
    "\017\064\026\041\027\044\035\015\041\077\044\101\045" +
    "\047\046\071\047\053\050\033\051\072\052\011\053\063" +
    "\067\020\070\022\001\002\000\004\032\257\001\002\000" +
    "\042\013\055\017\064\026\041\027\044\035\015\041\077" +
    "\044\101\045\047\046\071\047\053\050\033\051\072\052" +
    "\011\053\063\067\020\070\022\001\002\000\004\036\261" +
    "\001\002\000\004\041\262\001\002\000\104\013\055\017" +
    "\064\026\041\027\044\035\015\041\077\043\045\044\026" +
    "\045\047\046\071\047\053\050\033\051\072\052\011\053" +
    "\063\054\052\055\046\056\005\057\004\060\070\061\056" +
    "\062\012\063\013\064\042\065\043\066\021\067\020\070" +
    "\022\071\006\072\065\074\024\100\060\101\017\001\002" +
    "\000\106\013\055\017\064\026\041\027\044\035\015\041" +
    "\077\042\264\043\045\044\026\045\047\046\071\047\053" +
    "\050\033\051\072\052\011\053\063\054\052\055\046\056" +
    "\005\057\004\060\070\061\056\062\012\063\013\064\042" +
    "\065\043\066\021\067\020\070\022\071\006\072\065\074" +
    "\024\100\060\101\017\001\002\000\110\002\uffe2\013\uffe2" +
    "\017\uffe2\026\uffe2\027\uffe2\035\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\072\uffe2\074\uffe2\100\uffe2\101" +
    "\uffe2\001\002\000\004\036\266\001\002\000\160\002\uffa8" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\031\uffa8\032\uffa8\035\uffa8\036\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8" +
    "\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065" +
    "\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\074\uffa8" +
    "\100\uffa8\101\uffa8\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\056\002\007\003\015\005\013\006\061\017" +
    "\056\020\047\021\006\024\053\025\022\026\026\030\050" +
    "\034\037\035\036\036\035\037\034\040\031\041\030\042" +
    "\027\043\024\044\060\046\065\047\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\034\264\035" +
    "\036\036\035\037\034\040\031\041\030\042\027\043\024" +
    "\044\060\046\065\001\001\000\052\005\161\006\162\017" +
    "\056\020\047\021\006\024\053\025\022\026\026\030\050" +
    "\034\037\035\036\036\035\037\034\040\031\041\030\042" +
    "\027\043\024\044\060\046\065\047\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\156\005\013\006\061\017\056\020\047\021" +
    "\006\024\053\025\022\026\026\030\050\034\157\035\036" +
    "\036\035\037\034\040\031\041\030\042\027\043\024\044" +
    "\060\046\065\047\066\050\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\042\134\043\024\044\060\046\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\042\133\043\024\044" +
    "\060\046\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\042\131\043\024\044\060\046\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\036\117\037" +
    "\034\040\031\041\030\042\027\043\024\044\060\046\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\034\111\035\036\036" +
    "\035\037\034\040\031\041\030\042\027\043\024\044\060" +
    "\046\065\001\001\000\002\001\001\000\026\034\077\035" +
    "\036\036\035\037\034\040\031\041\030\042\027\043\024" +
    "\044\060\046\065\001\001\000\030\034\102\035\036\036" +
    "\035\037\034\040\031\041\030\042\027\043\024\044\060" +
    "\046\065\050\103\001\001\000\002\001\001\000\004\045" +
    "\101\001\001\000\002\001\001\000\004\051\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\034\107\035" +
    "\036\036\035\037\034\040\031\041\030\042\027\043\024" +
    "\044\060\046\065\001\001\000\002\001\001\000\004\051" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\034\121\035\036\036\035\037\034\040\031\041" +
    "\030\042\027\043\024\044\060\046\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\004\124\005\125\017" +
    "\056\020\047\021\006\024\053\025\022\026\026\030\050" +
    "\034\037\035\036\036\035\037\034\040\031\041\030\042" +
    "\027\043\024\044\060\046\065\047\066\001\001\000\050" +
    "\005\126\017\056\020\047\021\006\024\053\025\022\026" +
    "\026\030\050\034\037\035\036\036\035\037\034\040\031" +
    "\041\030\042\027\043\024\044\060\046\065\047\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\034\145\035\036\036\035\037\034\040\031\041\030\042" +
    "\027\043\024\044\060\046\065\001\001\000\026\034\144" +
    "\035\036\036\035\037\034\040\031\041\030\042\027\043" +
    "\024\044\060\046\065\001\001\000\026\034\143\035\036" +
    "\036\035\037\034\040\031\041\030\042\027\043\024\044" +
    "\060\046\065\001\001\000\026\034\142\035\036\036\035" +
    "\037\034\040\031\041\030\042\027\043\024\044\060\046" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\036\155\037\034\040" +
    "\031\041\030\042\027\043\024\044\060\046\065\001\001" +
    "\000\022\036\154\037\034\040\031\041\030\042\027\043" +
    "\024\044\060\046\065\001\001\000\022\036\153\037\034" +
    "\040\031\041\030\042\027\043\024\044\060\046\065\001" +
    "\001\000\022\036\152\037\034\040\031\041\030\042\027" +
    "\043\024\044\060\046\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\005\161\006\162\017\056\020\047\021\006\024\053\025" +
    "\022\026\026\030\050\034\037\035\036\036\035\037\034" +
    "\040\031\041\030\042\027\043\024\044\060\046\065\047" +
    "\066\001\001\000\004\051\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\037\167\040\031\041\030\042\027\043\024\044\060" +
    "\046\065\001\001\000\020\037\166\040\031\041\030\042" +
    "\027\043\024\044\060\046\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\040\175\041\030\042\027\043" +
    "\024\044\060\046\065\001\001\000\016\040\174\041\030" +
    "\042\027\043\024\044\060\046\065\001\001\000\016\040" +
    "\173\041\030\042\027\043\024\044\060\046\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\041\203\042\027\043\024\044\060\046\065\001\001" +
    "\000\014\041\202\042\027\043\024\044\060\046\065\001" +
    "\001\000\014\041\201\042\027\043\024\044\060\046\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\034\205\035\036\036\035\037\034\040\031" +
    "\041\030\042\027\043\024\044\060\046\065\001\001\000" +
    "\002\001\001\000\026\034\207\035\036\036\035\037\034" +
    "\040\031\041\030\042\027\043\024\044\060\046\065\001" +
    "\001\000\002\001\001\000\052\004\247\005\125\017\056" +
    "\020\047\021\006\024\053\025\022\026\026\030\050\034" +
    "\037\035\036\036\035\037\034\040\031\041\030\042\027" +
    "\043\024\044\060\046\065\047\066\001\001\000\002\001" +
    "\001\000\052\004\213\005\125\017\056\020\047\021\006" +
    "\024\053\025\022\026\026\030\050\034\037\035\036\036" +
    "\035\037\034\040\031\041\030\042\027\043\024\044\060" +
    "\046\065\047\066\001\001\000\050\005\126\017\056\020" +
    "\047\021\006\024\053\025\022\026\026\030\050\034\037" +
    "\035\036\036\035\037\034\040\031\041\030\042\027\043" +
    "\024\044\060\046\065\047\066\001\001\000\006\022\216" +
    "\023\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\004\223\005\125\017\056\020\047\021\006\024\053\025" +
    "\022\026\026\030\050\034\037\035\036\036\035\037\034" +
    "\040\031\041\030\042\027\043\024\044\060\046\065\047" +
    "\066\001\001\000\050\005\126\017\056\020\047\021\006" +
    "\024\053\025\022\026\026\030\050\034\037\035\036\036" +
    "\035\037\034\040\031\041\030\042\027\043\024\044\060" +
    "\046\065\047\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\034\227\035\036\036\035\037\034\040\031" +
    "\041\030\042\027\043\024\044\060\046\065\001\001\000" +
    "\002\001\001\000\052\004\240\005\125\017\056\020\047" +
    "\021\006\024\053\025\022\026\026\030\050\034\037\035" +
    "\036\036\035\037\034\040\031\041\030\042\027\043\024" +
    "\044\060\046\065\047\066\001\001\000\002\001\001\000" +
    "\052\004\233\005\125\017\056\020\047\021\006\024\053" +
    "\025\022\026\026\030\050\034\037\035\036\036\035\037" +
    "\034\040\031\041\030\042\027\043\024\044\060\046\065" +
    "\047\066\001\001\000\050\005\126\017\056\020\047\021" +
    "\006\024\053\025\022\026\026\030\050\034\037\035\036" +
    "\036\035\037\034\040\031\041\030\042\027\043\024\044" +
    "\060\046\065\047\066\001\001\000\006\022\235\023\215" +
    "\001\001\000\002\001\001\000\006\022\237\023\215\001" +
    "\001\000\002\001\001\000\050\005\126\017\056\020\047" +
    "\021\006\024\053\025\022\026\026\030\050\034\037\035" +
    "\036\036\035\037\034\040\031\041\030\042\027\043\024" +
    "\044\060\046\065\047\066\001\001\000\006\022\242\023" +
    "\215\001\001\000\002\001\001\000\006\022\244\023\215" +
    "\001\001\000\002\001\001\000\006\022\246\023\215\001" +
    "\001\000\002\001\001\000\050\005\126\017\056\020\047" +
    "\021\006\024\053\025\022\026\026\030\050\034\037\035" +
    "\036\036\035\037\034\040\031\041\030\042\027\043\024" +
    "\044\060\046\065\047\066\001\001\000\006\022\251\023" +
    "\215\001\001\000\002\001\001\000\006\022\253\023\215" +
    "\001\001\000\002\001\001\000\026\034\255\035\036\036" +
    "\035\037\034\040\031\041\030\042\027\043\024\044\060" +
    "\046\065\001\001\000\002\001\001\000\026\034\257\035" +
    "\036\036\035\037\034\040\031\041\030\042\027\043\024" +
    "\044\060\046\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\262\005\125\017\056\020\047\021\006" +
    "\024\053\025\022\026\026\030\050\034\037\035\036\036" +
    "\035\037\034\040\031\041\030\042\027\043\024\044\060" +
    "\046\065\047\066\001\001\000\050\005\126\017\056\020" +
    "\047\021\006\024\053\025\022\026\026\030\050\034\037" +
    "\035\036\036\035\037\034\040\031\041\030\042\027\043" +
    "\024\044\060\046\065\047\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= INSTRUCTION_OR_FUNCTION 
            {
              ArrayList<Instruction> RESULT =null;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Is; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		ArrayList<Instruction> start_val = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTION_OR_FUNCTION ::= INSTRUCTION 
            {
              ArrayList<Instruction> RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 ArrayList<Instruction> instrs = new ArrayList<Instruction>();
                               instrs.add(Val_I);
                               RESULT = instrs;
                            
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OR_FUNCTION",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTION_OR_FUNCTION ::= SCOPE 
            {
              ArrayList<Instruction> RESULT =null;
		Instruction Val_Scope = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 ArrayList<Instruction> instrs = new ArrayList<Instruction>();
                               instrs.add(Val_Scope);
                               RESULT = instrs;
                            
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OR_FUNCTION",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION_OR_FUNCTION ::= INSTRUCTION_OR_FUNCTION INSTRUCTION 
            {
              ArrayList<Instruction> RESULT =null;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
                               Val_Is.add(Val_I);
                               RESULT = Val_Is;
                            
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OR_FUNCTION",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION_OR_FUNCTION ::= INSTRUCTION_OR_FUNCTION SCOPE 
            {
              ArrayList<Instruction> RESULT =null;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Instruction Val_Scope = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
                               Val_Is.add(Val_Scope);
                               RESULT = Val_Is;
                            
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OR_FUNCTION",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SCOPE ::= CURLY_OPEN INSTRUCTION_OR_FUNCTION CURLY_CLOSE 
            {
              Instruction RESULT =null;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		
             InstructionBlock block = new InstructionBlock(Val_Is);
             RESULT = block;
          
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SCOPE",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SCOPE ::= CURLY_OPEN CURLY_CLOSE 
            {
              Instruction RESULT =null;
		 RESULT = new EmptyScope(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SCOPE",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              ArrayList<Instruction> RESULT =null;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
                    Val_Is.add(Val_I);
                    RESULT = Val_Is;
                 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTIONS ::= INSTRUCTION 
            {
              ArrayList<Instruction> RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
                    ArrayList<Instruction> instrs = new ArrayList<Instruction>();
                    instrs.add(Val_I);
                    RESULT = instrs;
                 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= WHILE_LOOP 
            {
              Instruction RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_I; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= FOR_LOOP 
            {
              Instruction RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_I; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= DECLARATION SEMI_COLON 
            {
              Instruction RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = Val_I; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= DECLARATION 
            {
              Instruction RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
   Main.push_syntax_error("Ç2000: missing ';' after end of statement.");
   String at_error = "   At: " + Val_I.toString().replace('\n', ' ');
   Main.push_syntax_error(at_error);
   RESULT = Val_I;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= Sif0 
            {
              Instruction RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = Val_I; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= ASSIGNATION SEMI_COLON 
            {
              Instruction RESULT =null;
		Instruction Val_A = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		
   RESULT = Val_A;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= ASSIGNATION 
            {
              Instruction RESULT =null;
		Instruction Val_A = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
   Main.push_syntax_error("Ç2000: missing ';' after end of statement.");
   String at_error = "   At: " + Val_A.toString().replace('\n', ' ');
   Main.push_syntax_error(at_error);
   RESULT = Val_A;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= EXP0 SEMI_COLON 
            {
              Instruction RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new FloatingExpression(Val_Exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sif0 ::= IF PARENTH_OPEN EXP0 PARENTH_CLOSE CURLY_OPEN INSTRUCTIONS CURLY_CLOSE Sif1 
            {
              Instruction RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Instruction Val_Elseif = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new If(Val_Exp, Val_Elseif, Val_Is); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sif0 ::= IF PARENTH_OPEN EXP0 CURLY_OPEN INSTRUCTIONS CURLY_CLOSE Sif1 
            {
              Instruction RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Instruction Val_Elseif = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new If(Val_Exp, Val_Elseif, Val_Is);
         Main.push_syntax_error("Ç2001: missing ')' after if statement.");
         String at_error = "   At: " + RESULT.toString().replace('\n', ' ');
         Main.push_syntax_error(at_error);         
          
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sif0 ::= IF PARENTH_OPEN EXP0 PARENTH_CLOSE CURLY_OPEN CURLY_CLOSE Sif1 
            {
              Instruction RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Instruction Val_Elseif = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new If(Val_Exp, Val_Elseif, new ArrayList<Instruction>()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sif0 ::= IF PARENTH_OPEN EXP0 CURLY_OPEN CURLY_CLOSE Sif1 
            {
              Instruction RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Instruction Val_Elseif = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new If(Val_Exp, Val_Elseif, new ArrayList<Instruction>());
         Main.push_syntax_error("Ç2001: missing ')' after if statement.");
         String at_error = "   At: " + RESULT.toString().replace('\n', ' ');
         Main.push_syntax_error(at_error);         
          
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sif1 ::= Sif2 
            {
              Instruction RESULT =null;
		Instruction Val_Else = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Else; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Sif1 ::= ELSEIF PARENTH_OPEN EXP0 PARENTH_CLOSE CURLY_OPEN INSTRUCTIONS CURLY_CLOSE Sif1 
            {
              Instruction RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Instruction Val_Elseif = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new If(Val_Exp, Val_Elseif, Val_Is); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Sif1 ::= ELSEIF PARENTH_OPEN EXP0 CURLY_OPEN INSTRUCTIONS CURLY_CLOSE Sif1 
            {
              Instruction RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Instruction Val_Elseif = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new If(Val_Exp, Val_Elseif, Val_Is);
         Main.push_syntax_error("Ç2001: missing ')' after if statement.");
         String at_error = "   At: " + RESULT.toString().replace('\n', ' ');
         Main.push_syntax_error(at_error);         
          
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sif1 ::= ELSEIF PARENTH_OPEN EXP0 PARENTH_CLOSE CURLY_OPEN CURLY_CLOSE Sif1 
            {
              Instruction RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Instruction Val_Elseif = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new If(Val_Exp, Val_Elseif, new ArrayList<Instruction>()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sif1 ::= ELSEIF PARENTH_OPEN EXP0 CURLY_OPEN CURLY_CLOSE Sif1 
            {
              Instruction RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Instruction Val_Elseif = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new If(Val_Exp, Val_Elseif, new ArrayList<Instruction>());
         Main.push_syntax_error("Ç2001: missing ')' after if statement.");
         String at_error = "   At: " + RESULT.toString().replace('\n', ' ');
         Main.push_syntax_error(at_error);         
          
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Sif2 ::= 
            {
              Instruction RESULT =null;
		 RESULT = new Empty(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Sif2 ::= ELSE1 ELSE2 CURLY_OPEN INSTRUCTIONS CURLY_CLOSE 
            {
              Instruction RESULT =null;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Else(Val_Is); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Sif2 ::= ELSE1 ELSE2 CURLY_OPEN CURLY_CLOSE 
            {
              Instruction RESULT =null;
		 RESULT = new Else(new ArrayList<Instruction>()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sif2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WHILE_LOOP ::= WHILE PARENTH_OPEN EXP0 PARENTH_CLOSE CURLY_OPEN INSTRUCTIONS CURLY_CLOSE 
            {
              Instruction RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new While(Val_Exp, Val_Is); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILE_LOOP",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FOR_LOOP ::= FOR PARENTH_OPEN EXP0 SEMI_COLON EXP0 PARENTH_CLOSE CURLY_OPEN INSTRUCTIONS CURLY_CLOSE 
            {
              Instruction RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E Val_Exp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<Instruction> Val_Is = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new For(Val_Exp1, Val_Exp2, Val_Is); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FOR_LOOP",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // _FUNCTION ::= F_BODY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("_FUNCTION",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // _FUNCTION ::= F_HEADER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("_FUNCTION",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // F_PARAMETERS ::= F_PARAMETER MORE_F_PARAMETERS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_PARAMETERS",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // F_PARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_PARAMETERS",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MORE_F_PARAMETERS ::= COMA F_PARAMETER MORE_F_PARAMETERS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_F_PARAMETERS",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MORE_F_PARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_F_PARAMETERS",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // F_PARAMETER ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_PARAMETER",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // F_ARGUMENTS ::= F_ARGUMENT MORE_F_ARGUMENTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_ARGUMENTS",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // F_ARGUMENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_ARGUMENTS",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MORE_F_ARGUMENTS ::= COMA F_ARGUMENT MORE_F_ARGUMENTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_F_ARGUMENTS",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MORE_F_ARGUMENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_F_ARGUMENTS",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // F_ARGUMENT ::= IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_ARGUMENT",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARATIONS ::= DECLARATIONS DECLARATION SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARATIONS ::= DECLARATION SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARATION ::= TYPEDEC 
            {
              Instruction RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_I; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARATION ::= ARRDEC 
            {
              Instruction RESULT =null;
		Instruction Val_I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_I; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASSIGNATION ::= IDENTIFICATOR EQUALS EXP0 
            {
              Instruction RESULT =null;
		TokenValue Val_ID = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_EXP = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Assignation(Val_ID.lexema, Val_EXP); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TYPEDEC ::= TYPES IDENTIFICATOR 
            {
              Instruction RESULT =null;
		Types Val_Type = (Types)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue Val_ID = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new DeclarationUnassigned(Val_ID.lexema, Val_Type); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEC",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TYPEDEC ::= TYPES IDENTIFICATOR EQUALS EXP0 
            {
              Instruction RESULT =null;
		Types Val_Type = (Types)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue Val_ID = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_EXP = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Declaration(Val_ID.lexema, Val_Type, Val_EXP); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEC",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRUCTDEC ::= STRUCT IDENTIFICATOR 
            {
              Instruction RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRUCTDEC ::= STRUCT IDENTIFICATOR BRACKET_OPEN BRACKET_CLOSE 
            {
              Instruction RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRUCTDEC ::= STRUCT IDENTIFICATOR BRACKET_OPEN DECLARATIONS BRACKET_CLOSE 
            {
              Instruction RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARRDEC ::= TYPES ARRAY_ACCESS IDENTIFICATOR 
            {
              Instruction RESULT =null;
		Types Val_Type = (Types)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		LinkedList<E> Val_Access = (LinkedList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue Val_ID = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayDeclarationUnassigned(Val_ID.lexema, Val_Type, Val_Access); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRDEC",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARRDEC ::= TYPES ARRAY_ACCESS IDENTIFICATOR EQUALS ARRASSIGN 
            {
              Instruction RESULT =null;
		Types Val_Type = (Types)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		LinkedList<E> Val_Access = (LinkedList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue Val_ID = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayDeclaration(Val_ID.lexema, Val_Type, Val_Access, Val_Exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRDEC",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // F_HEADER ::= FUNCTION IDENTIFICATOR PARENTH_OPEN F_PARAMETERS PARENTH_CLOSE TYPE_IDENT TYPES SEMI_COLON 
            {
              Instruction RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_HEADER",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // F_BODY ::= FUNCTION IDENTIFICATOR PARENTH_OPEN F_PARAMETERS PARENTH_CLOSE TYPE_IDENT TYPES CURLY_OPEN INSTRUCTIONS CURLY_CLOSE 
            {
              Instruction RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_BODY",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // F_CALL ::= IDENTIFICATOR PARENTH_OPEN F_ARGUMENTS PARENTH_CLOSE 
            {
              Instruction RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_CALL",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP0 ::= EXP1 OPERATOR_BAND EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.BAND); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP0 ::= EXP1 OPERATOR_BOR EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.BOR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP0 ::= EXP1 OPERATOR_EQUAL EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.EQUAL); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP0 ::= EXP1 OPERATOR_NEQ EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.NEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP0 ::= EXP1 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp1; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP1 ::= OPERATOR_BNOT EXP2 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.BNOT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP1 ::= EXP2 
            {
              E RESULT =null;
		E Val_Exp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp2; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP2 ::= EXP3 OPERATOR_GT EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.GT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP2 ::= EXP3 OPERATOR_LT EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.LT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP2 ::= EXP3 OPERATOR_GEQ EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.GEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP2 ::= EXP3 OPERATOR_LEQ EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.LEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP2 ::= EXP3 
            {
              E RESULT =null;
		E Val_Exp3 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp3; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP3 ::= EXP4 OPERATOR_ADD EXP3 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.PLUS); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP3 ::= EXP4 OPERATOR_SUB EXP3 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MINUS); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP3 ::= EXP4 
            {
              E RESULT =null;
		E Val_Exp4 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp4; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP4 ::= EXP5 OPERATOR_MULT EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MULT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP4 ::= EXP5 OPERATOR_DIV EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.DIV); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP4 ::= EXP5 OPERATOR_MOD EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MOD); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP4 ::= EXP5 
            {
              E RESULT =null;
		E Val_Exp5 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp5; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP5 ::= EXP6 OPERATOR_AND EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.AND); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP5 ::= EXP6 OPERATOR_OR EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.OR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP5 ::= EXP6 OPERATOR_XOR EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.XOR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP5 ::= OPERATOR_NOT EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.NOT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP5 ::= EXP6 
            {
              E RESULT =null;
		E Val_Exp6 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp6; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP6 ::= OPERATOR_PP EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.PP_PRE); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP6 ::= OPERATOR_MM EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.MM_PRE); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP6 ::= EXP7 
            {
              E RESULT =null;
		E Val_Exp7 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp7; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP7 ::= VALUE 
            {
              E RESULT =null;
		Num Val = (Num)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP7 ::= IDENTIFICATOR 
            {
              E RESULT =null;
		TokenValue Val_ID = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Identificator(Val_ID.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP7 ::= IDENTIFICATOR ARRAY_ACCESS 
            {
              E RESULT =null;
		TokenValue Val_ID = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		LinkedList<E> Val_Access = (LinkedList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayAccess(Val_ID.lexema, Val_Access); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP7 ::= PARENTH_OPEN EXP0 PARENTH_CLOSE 
            {
              E RESULT =null;
		E Val_EXP = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = Val_EXP; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP7 ::= ARRASSIGN 
            {
              E RESULT =null;
		E Val_E = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_E; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ARRASSIGN ::= CURLY_OPEN ARRCONTENTS CURLY_CLOSE 
            {
              E RESULT =null;
		LinkedList<E> Val_Exps = (LinkedList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ExprArray(Val_Exps); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRASSIGN",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ARRCONTENTS ::= EXP0 MORE_ARRCONTENTS 
            {
              LinkedList<E> RESULT =null;
		E Val_E = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		LinkedList<E> Val_Es = (LinkedList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 Val_Es.addFirst(Val_E);
                   RESULT = Val_Es;
                
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENTS",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MORE_ARRCONTENTS ::= COMA EXP0 MORE_ARRCONTENTS 
            {
              LinkedList<E> RESULT =null;
		E Val_E = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		LinkedList<E> Val_Es = (LinkedList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 Val_Es.addFirst(Val_E);
                   RESULT = Val_Es;
                
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARRCONTENTS",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MORE_ARRCONTENTS ::= 
            {
              LinkedList<E> RESULT =null;
		 LinkedList<E> emptyList = new LinkedList<>();
                   RESULT = emptyList;
                
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARRCONTENTS",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARRAY_ACCESS ::= BRACKET_OPEN EXP0 BRACKET_CLOSE ARRAY_ACCESS 
            {
              LinkedList<E> RESULT =null;
		E Val_Idx = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		LinkedList<E> Val_Access = (LinkedList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 Val_Access.addFirst(Val_Idx);
                    RESULT = Val_Access;
                 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRAY_ACCESS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARRAY_ACCESS ::= BRACKET_OPEN EXP0 BRACKET_CLOSE 
            {
              LinkedList<E> RESULT =null;
		E Val_Idx = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 LinkedList<E> arrayAccess = new LinkedList<>();
                    arrayAccess.add(Val_Idx);
                    RESULT = arrayAccess;
                 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRAY_ACCESS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALUE ::= NUMBER_NAT 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.UINT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALUE ::= NUMBER_INT 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.INT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALUE ::= NUMBER_FLOAT 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.FLOAT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALUE ::= NUMBER_BIN 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.UINT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALUE ::= NUMBER_HEX 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.UINT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALUE ::= RVAL_CHAR 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.CHAR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALUE ::= RVAL_CHAR_ARR 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.CHAR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALUE ::= TRUE_ 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.BOOL); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALUE ::= FALSE_ 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.BOOL); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TYPES ::= UINT8 
            {
              Types RESULT =null;
		 RESULT = Types.UINT8; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TYPES ::= UINT16 
            {
              Types RESULT =null;
		 RESULT = Types.UINT16; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TYPES ::= UINT32 
            {
              Types RESULT =null;
		 RESULT = Types.UINT32; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TYPES ::= UINT64 
            {
              Types RESULT =null;
		 RESULT = Types.UINT64; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TYPES ::= INT8 
            {
              Types RESULT =null;
		 RESULT = Types.INT8; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TYPES ::= INT16 
            {
              Types RESULT =null;
		 RESULT = Types.INT16; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TYPES ::= INT32 
            {
              Types RESULT =null;
		 RESULT = Types.INT32; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TYPES ::= INT64 
            {
              Types RESULT =null;
		 RESULT = Types.INT64; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TYPES ::= FLOAT32 
            {
              Types RESULT =null;
		 RESULT = Types.FLOAT32; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TYPES ::= FLOAT64 
            {
              Types RESULT =null;
		 RESULT = Types.FLOAT64; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TYPES ::= CHAR 
            {
              Types RESULT =null;
		 RESULT = Types.CHAR; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TYPES ::= UCHAR 
            {
              Types RESULT =null;
		 RESULT = Types.UCHAR; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TYPES ::= BOOL 
            {
              Types RESULT =null;
		 RESULT = Types.BOOL; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TYPES ::= VOID 
            {
              Types RESULT =null;
		 RESULT = Types.VOID; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

