
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Nov 21 11:53:06 CET 2024
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import lex.AnalizadorLexicoTiny;
import lex.UnidadLexica;
import lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Nov 21 11:53:06 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\004\004\000\002\004\003\000\002\005\004\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\013\004\000\002\013\002\000\002\014\005\000\002\014" +
    "\002\000\002\015\003\000\002\007\005\000\002\007\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\005\000\002\016\004\000\002\016\006\000\002" +
    "\017\004\000\002\017\006\000\002\017\007\000\002\020" +
    "\007\000\002\020\011\000\002\021\012\000\002\022\014" +
    "\000\002\012\005\000\002\012\003\000\002\035\004\000" +
    "\002\035\002\000\002\036\005\000\002\036\002\000\002" +
    "\037\003\000\002\037\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\003" +
    "\000\002\024\004\000\002\024\003\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\003\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\004\000\002\030\003\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\005\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\044\043\035\044\020\054\033\055\037\056" +
    "\024\057\023\060\014\061\022\062\015\063\013\064\034" +
    "\065\032\066\031\071\007\072\021\073\006\103\011\001" +
    "\002\000\006\037\202\044\203\001\002\000\046\002\ufff6" +
    "\043\ufff6\044\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6" +
    "\071\ufff6\072\ufff6\073\ufff6\103\ufff6\001\002\000\004\044" +
    "\171\001\002\000\012\032\uffa6\037\uffa6\041\uffa6\044\uffa6" +
    "\001\002\000\004\002\170\001\002\000\004\044\146\001" +
    "\002\000\046\002\ufff7\043\ufff7\044\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064" +
    "\ufff7\065\ufff7\066\ufff7\071\ufff7\072\ufff7\073\ufff7\103\ufff7" +
    "\001\002\000\012\032\uffa9\037\uffa9\041\uffa9\044\uffa9\001" +
    "\002\000\012\032\uffac\037\uffac\041\uffac\044\uffac\001\002" +
    "\000\012\032\uffaa\037\uffaa\041\uffaa\044\uffaa\001\002\000" +
    "\046\002\ufffe\043\035\044\020\054\033\055\037\056\024" +
    "\057\023\060\014\061\022\062\015\063\013\064\034\065" +
    "\032\066\031\071\007\072\021\073\006\103\011\001\002" +
    "\000\046\002\uffff\043\035\044\020\054\033\055\037\056" +
    "\024\057\023\060\014\061\022\062\015\063\013\064\034" +
    "\065\032\066\031\071\007\072\021\073\006\103\011\001" +
    "\002\000\004\030\043\001\002\000\012\032\uffa5\037\uffa5" +
    "\041\uffa5\044\uffa5\001\002\000\012\032\uffab\037\uffab\041" +
    "\uffab\044\uffab\001\002\000\012\032\uffad\037\uffad\041\uffad" +
    "\044\uffad\001\002\000\012\032\uffae\037\uffae\041\uffae\044" +
    "\uffae\001\002\000\010\031\uffee\032\uffee\036\uffee\001\002" +
    "\000\004\032\042\001\002\000\010\031\uffec\032\uffec\036" +
    "\uffec\001\002\000\004\032\041\001\002\000\012\032\uffa4" +
    "\037\uffa4\041\uffa4\044\uffa4\001\002\000\012\032\uffa7\037" +
    "\uffa7\041\uffa7\044\uffa7\001\002\000\012\032\uffb0\037\uffb0" +
    "\041\uffb0\044\uffb0\001\002\000\012\032\uffa8\037\uffa8\041" +
    "\uffa8\044\uffa8\001\002\000\012\032\uffa3\037\uffa3\041\uffa3" +
    "\044\uffa3\001\002\000\010\031\uffed\032\uffed\036\uffed\001" +
    "\002\000\012\032\uffaf\037\uffaf\041\uffaf\044\uffaf\001\002" +
    "\000\004\002\001\001\002\000\050\002\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\071" +
    "\ufff8\072\ufff8\073\ufff8\103\ufff8\001\002\000\050\002\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\054\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\071\ufff9\072\ufff9\073\ufff9\103\ufff9\001\002\000" +
    "\040\013\061\017\071\026\056\027\057\035\066\044\064" +
    "\045\073\046\065\047\063\050\054\051\072\052\067\053" +
    "\062\067\060\070\070\001\002\000\054\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\143\027\142\031\uffbd\032\uffbd\036\uffbd\001" +
    "\002\000\050\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\135" +
    "\011\134\012\136\014\uffc2\015\uffc2\016\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\031\uffc2\032\uffc2" +
    "\036\uffc2\001\002\000\042\004\uffc7\005\uffc7\006\127\007" +
    "\130\014\126\015\uffc7\016\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\031\uffc7\032\uffc7\036\uffc7\001" +
    "\002\000\034\004\123\005\122\015\uffcb\016\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\031\uffcb\032" +
    "\uffcb\036\uffcb\001\002\000\030\015\uffce\016\uffce\020\uffce" +
    "\021\uffce\022\114\023\112\024\113\025\115\031\uffce\032" +
    "\uffce\036\uffce\001\002\000\020\015\uffd3\016\uffd3\020\uffd3" +
    "\021\uffd3\031\uffd3\032\uffd3\036\uffd3\001\002\000\020\015" +
    "\103\016\105\020\102\021\104\031\uffd5\032\uffd5\036\uffd5" +
    "\001\002\000\004\032\uffeb\001\002\000\056\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb6\036\uffb6" +
    "\042\uffb6\001\002\000\054\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\031\uffbc\032\uffbc\036\uffbc\001\002\000\034" +
    "\026\056\027\057\035\066\044\064\045\073\046\065\047" +
    "\063\050\054\051\072\052\067\053\062\067\060\070\070" +
    "\001\002\000\034\026\056\027\057\035\066\044\064\045" +
    "\073\046\065\047\063\050\054\051\072\052\067\053\062" +
    "\067\060\070\070\001\002\000\056\004\uffb2\005\uffb2\006" +
    "\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\031\uffb2\032\uffb2\036\uffb2\042\uffb2" +
    "\001\002\000\034\026\056\027\057\035\066\044\064\045" +
    "\073\046\065\047\063\050\054\051\072\052\067\053\062" +
    "\067\060\070\070\001\002\000\056\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\014\uffb3\015\uffb3" +
    "\016\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\031\uffb3\032\uffb3\036\uffb3\042\uffb3" +
    "\001\002\000\056\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\031\uffb7\032\uffb7\036\uffb7\042\uffb7\001\002\000\054" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb\032" +
    "\uffbb\036\uffbb\001\002\000\056\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\031\uffb8\032\uffb8\036\uffb8\042\uffb8\001" +
    "\002\000\040\013\061\017\071\026\056\027\057\035\066" +
    "\044\064\045\073\046\065\047\063\050\054\051\072\052" +
    "\067\053\062\067\060\070\070\001\002\000\056\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\031\uffb4\032\uffb4\036" +
    "\uffb4\042\uffb4\001\002\000\056\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\031\uffb1\032\uffb1\036\uffb1\042\uffb1\001" +
    "\002\000\036\013\061\026\056\027\057\035\066\044\064" +
    "\045\073\046\065\047\063\050\054\051\072\052\067\053" +
    "\062\067\060\070\070\001\002\000\056\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\031\uffb5\032\uffb5\036\uffb5\042" +
    "\uffb5\001\002\000\056\004\uffb9\005\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\031\uffb9\032\uffb9\036\uffb9\042\uffb9\001\002\000" +
    "\020\015\uffd4\016\uffd4\020\uffd4\021\uffd4\031\uffd4\032\uffd4" +
    "\036\uffd4\001\002\000\004\036\076\001\002\000\054\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba" +
    "\014\uffba\015\uffba\016\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\031\uffba\032\uffba" +
    "\036\uffba\001\002\000\042\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\031\uffc3\032\uffc3\036\uffc3\001" +
    "\002\000\050\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\031\uffc0\032\uffc0" +
    "\036\uffc0\001\002\000\050\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\031" +
    "\uffc1\032\uffc1\036\uffc1\001\002\000\040\013\061\017\071" +
    "\026\056\027\057\035\066\044\064\045\073\046\065\047" +
    "\063\050\054\051\072\052\067\053\062\067\060\070\070" +
    "\001\002\000\040\013\061\017\071\026\056\027\057\035" +
    "\066\044\064\045\073\046\065\047\063\050\054\051\072" +
    "\052\067\053\062\067\060\070\070\001\002\000\040\013" +
    "\061\017\071\026\056\027\057\035\066\044\064\045\073" +
    "\046\065\047\063\050\054\051\072\052\067\053\062\067" +
    "\060\070\070\001\002\000\040\013\061\017\071\026\056" +
    "\027\057\035\066\044\064\045\073\046\065\047\063\050" +
    "\054\051\072\052\067\053\062\067\060\070\070\001\002" +
    "\000\010\031\uffd8\032\uffd8\036\uffd8\001\002\000\010\031" +
    "\uffd6\032\uffd6\036\uffd6\001\002\000\010\031\uffd9\032\uffd9" +
    "\036\uffd9\001\002\000\010\031\uffd7\032\uffd7\036\uffd7\001" +
    "\002\000\036\013\061\026\056\027\057\035\066\044\064" +
    "\045\073\046\065\047\063\050\054\051\072\052\067\053" +
    "\062\067\060\070\070\001\002\000\036\013\061\026\056" +
    "\027\057\035\066\044\064\045\073\046\065\047\063\050" +
    "\054\051\072\052\067\053\062\067\060\070\070\001\002" +
    "\000\036\013\061\026\056\027\057\035\066\044\064\045" +
    "\073\046\065\047\063\050\054\051\072\052\067\053\062" +
    "\067\060\070\070\001\002\000\036\013\061\026\056\027" +
    "\057\035\066\044\064\045\073\046\065\047\063\050\054" +
    "\051\072\052\067\053\062\067\060\070\070\001\002\000" +
    "\020\015\uffcf\016\uffcf\020\uffcf\021\uffcf\031\uffcf\032\uffcf" +
    "\036\uffcf\001\002\000\020\015\uffd2\016\uffd2\020\uffd2\021" +
    "\uffd2\031\uffd2\032\uffd2\036\uffd2\001\002\000\020\015\uffd0" +
    "\016\uffd0\020\uffd0\021\uffd0\031\uffd0\032\uffd0\036\uffd0\001" +
    "\002\000\020\015\uffd1\016\uffd1\020\uffd1\021\uffd1\031\uffd1" +
    "\032\uffd1\036\uffd1\001\002\000\036\013\061\026\056\027" +
    "\057\035\066\044\064\045\073\046\065\047\063\050\054" +
    "\051\072\052\067\053\062\067\060\070\070\001\002\000" +
    "\036\013\061\026\056\027\057\035\066\044\064\045\073" +
    "\046\065\047\063\050\054\051\072\052\067\053\062\067" +
    "\060\070\070\001\002\000\030\015\uffcd\016\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\031\uffcd\032" +
    "\uffcd\036\uffcd\001\002\000\030\015\uffcc\016\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\031\uffcc\032" +
    "\uffcc\036\uffcc\001\002\000\036\013\061\026\056\027\057" +
    "\035\066\044\064\045\073\046\065\047\063\050\054\051" +
    "\072\052\067\053\062\067\060\070\070\001\002\000\036" +
    "\013\061\026\056\027\057\035\066\044\064\045\073\046" +
    "\065\047\063\050\054\051\072\052\067\053\062\067\060" +
    "\070\070\001\002\000\036\013\061\026\056\027\057\035" +
    "\066\044\064\045\073\046\065\047\063\050\054\051\072" +
    "\052\067\053\062\067\060\070\070\001\002\000\034\004" +
    "\uffc9\005\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\031\uffc9\032\uffc9\036\uffc9\001" +
    "\002\000\034\004\uffca\005\uffca\015\uffca\016\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\031\uffca\032" +
    "\uffca\036\uffca\001\002\000\034\004\uffc8\005\uffc8\015\uffc8" +
    "\016\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\031\uffc8\032\uffc8\036\uffc8\001\002\000\036\013\061" +
    "\026\056\027\057\035\066\044\064\045\073\046\065\047" +
    "\063\050\054\051\072\052\067\053\062\067\060\070\070" +
    "\001\002\000\036\013\061\026\056\027\057\035\066\044" +
    "\064\045\073\046\065\047\063\050\054\051\072\052\067" +
    "\053\062\067\060\070\070\001\002\000\036\013\061\026" +
    "\056\027\057\035\066\044\064\045\073\046\065\047\063" +
    "\050\054\051\072\052\067\053\062\067\060\070\070\001" +
    "\002\000\042\004\uffc4\005\uffc4\006\uffc4\007\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\031\uffc4\032\uffc4\036\uffc4\001\002\000\042" +
    "\004\uffc6\005\uffc6\006\uffc6\007\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\031\uffc6\032\uffc6\036\uffc6\001\002\000\042\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\031\uffc5\032" +
    "\uffc5\036\uffc5\001\002\000\050\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\031\uffbe\032\uffbe\036\uffbe\001\002\000\050\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\031\uffbf\032\uffbf\036\uffbf\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\ufffc\001\002\000\004\035" +
    "\147\001\002\000\042\036\ufff4\043\035\054\033\055\037" +
    "\056\024\057\023\060\014\061\022\062\015\063\013\064" +
    "\034\065\032\066\031\071\007\072\021\073\006\001\002" +
    "\000\006\031\164\036\ufff2\001\002\000\004\036\153\001" +
    "\002\000\006\031\ufff1\036\ufff1\001\002\000\004\034\154" +
    "\001\002\000\036\043\035\054\033\055\037\056\024\057" +
    "\023\060\014\061\022\062\015\063\013\064\034\065\032" +
    "\066\031\071\007\072\021\001\002\000\006\032\157\041" +
    "\156\001\002\000\042\043\035\044\020\054\033\055\037" +
    "\056\024\057\023\060\014\061\022\062\015\063\013\064" +
    "\034\065\032\066\031\071\007\072\021\073\006\001\002" +
    "\000\046\002\uffe3\043\uffe3\044\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\071\uffe3\072\uffe3\073\uffe3\103\uffe3\001" +
    "\002\000\044\042\162\043\035\044\020\054\033\055\037" +
    "\056\024\057\023\060\014\061\022\062\015\063\013\064" +
    "\034\065\032\066\031\071\007\072\021\073\006\001\002" +
    "\000\044\042\ufffa\043\ufffa\044\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa" +
    "\065\ufffa\066\ufffa\071\ufffa\072\ufffa\073\ufffa\001\002\000" +
    "\046\002\uffe2\043\uffe2\044\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\071\uffe2\072\uffe2\073\uffe2\103\uffe2\001\002" +
    "\000\044\042\ufffb\043\ufffb\044\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\071\ufffb\072\ufffb\073\ufffb\001\002\000" +
    "\040\043\035\054\033\055\037\056\024\057\023\060\014" +
    "\061\022\062\015\063\013\064\034\065\032\066\031\071" +
    "\007\072\021\073\006\001\002\000\004\036\ufff5\001\002" +
    "\000\006\031\164\036\ufff2\001\002\000\004\036\ufff3\001" +
    "\002\000\004\002\000\001\002\000\012\031\uffe8\032\uffe8" +
    "\036\uffe8\037\172\001\002\000\042\040\174\043\035\054" +
    "\033\055\037\056\024\057\023\060\014\061\022\062\015" +
    "\063\013\064\034\065\032\066\031\071\007\072\021\073" +
    "\006\001\002\000\042\040\177\043\035\054\033\055\037" +
    "\056\024\057\023\060\014\061\022\062\015\063\013\064" +
    "\034\065\032\066\031\071\007\072\021\073\006\001\002" +
    "\000\010\031\uffe7\032\uffe7\036\uffe7\001\002\000\004\032" +
    "\176\001\002\000\042\040\uffef\043\uffef\054\uffef\055\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\065\uffef\066\uffef\071\uffef\072\uffef\073\uffef\001\002" +
    "\000\010\031\uffe6\032\uffe6\036\uffe6\001\002\000\004\032" +
    "\201\001\002\000\042\040\ufff0\043\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\065\ufff0\066\ufff0\071\ufff0\072\ufff0\073\ufff0\001\002" +
    "\000\004\045\206\001\002\000\012\030\204\031\uffea\032" +
    "\uffea\036\uffea\001\002\000\040\013\061\017\071\026\056" +
    "\027\057\035\066\044\064\045\073\046\065\047\063\050" +
    "\054\051\072\052\067\053\062\067\060\070\070\001\002" +
    "\000\010\031\uffe9\032\uffe9\036\uffe9\001\002\000\004\040" +
    "\207\001\002\000\004\044\210\001\002\000\012\030\211" +
    "\031\uffe5\032\uffe5\036\uffe5\001\002\000\006\041\212\053" +
    "\214\001\002\000\030\042\uffde\044\215\045\073\046\065" +
    "\047\063\050\054\051\072\052\067\053\062\067\060\070" +
    "\070\001\002\000\010\031\uffe4\032\uffe4\036\uffe4\001\002" +
    "\000\010\031\uffe0\032\uffe0\036\uffe0\001\002\000\006\031" +
    "\uffda\042\uffda\001\002\000\006\031\uffdb\042\uffdb\001\002" +
    "\000\006\031\222\042\uffdc\001\002\000\004\042\221\001" +
    "\002\000\010\031\uffe1\032\uffe1\036\uffe1\001\002\000\026" +
    "\044\215\045\073\046\065\047\063\050\054\051\072\052" +
    "\067\053\062\067\060\070\070\001\002\000\004\042\uffdf" +
    "\001\002\000\006\031\222\042\uffdc\001\002\000\004\042" +
    "\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\032\002\007\003\037\005\016\006\015\010" +
    "\025\011\027\016\024\017\035\020\026\021\004\022\011" +
    "\034\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\144\005\016\006\015" +
    "\010\025\011\027\016\024\017\035\020\026\021\004\022" +
    "\011\034\003\001\001\000\030\003\143\005\016\006\015" +
    "\010\025\011\027\016\024\017\035\020\026\021\004\022" +
    "\011\034\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\023\052\024\051\025\050\026\047" +
    "\027\046\030\045\031\044\032\043\033\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\100\032\043\033\054\001\001\000\010\031" +
    "\077\032\043\033\054\001\001\000\002\001\001\000\010" +
    "\031\076\032\043\033\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\023\074\024\051\025\050\026\047\027\046\030\045\031" +
    "\044\032\043\033\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\025\073\026\047\027\046\030\045\031" +
    "\044\032\043\033\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\023\110\024\051\025\050\026\047\027\046\030" +
    "\045\031\044\032\043\033\054\001\001\000\024\023\107" +
    "\024\051\025\050\026\047\027\046\030\045\031\044\032" +
    "\043\033\054\001\001\000\024\023\106\024\051\025\050" +
    "\026\047\027\046\030\045\031\044\032\043\033\054\001" +
    "\001\000\024\023\105\024\051\025\050\026\047\027\046" +
    "\030\045\031\044\032\043\033\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\025\120\026\047\027\046\030\045\031\044\032" +
    "\043\033\054\001\001\000\020\025\117\026\047\027\046" +
    "\030\045\031\044\032\043\033\054\001\001\000\020\025" +
    "\116\026\047\027\046\030\045\031\044\032\043\033\054" +
    "\001\001\000\020\025\115\026\047\027\046\030\045\031" +
    "\044\032\043\033\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\026" +
    "\124\027\046\030\045\031\044\032\043\033\054\001\001" +
    "\000\016\026\123\027\046\030\045\031\044\032\043\033" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\027\132\030\045\031\044\032\043\033\054\001\001\000" +
    "\014\027\131\030\045\031\044\032\043\033\054\001\001" +
    "\000\014\027\130\030\045\031\044\032\043\033\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\030\140\031\044\032\043\033\054\001\001\000" +
    "\012\030\137\031\044\032\043\033\054\001\001\000\012" +
    "\030\136\031\044\032\043\033\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\151\013\150\015\147\016\024" +
    "\017\035\020\026\034\003\001\001\000\004\014\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\154\001\001\000\002\001\001\000\022\004" +
    "\157\005\160\010\025\011\027\016\024\017\035\020\026" +
    "\034\003\001\001\000\002\001\001\000\020\005\162\010" +
    "\025\011\027\016\024\017\035\020\026\034\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\151\015\165\016\024\017\035\020\026\034\003" +
    "\001\001\000\002\001\001\000\004\014\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\172\010\174\016\024\017\035\020\026\034\003\001" +
    "\001\000\014\010\177\016\024\017\035\020\026\034\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\023\204\024" +
    "\051\025\050\026\047\027\046\030\045\031\044\032\043" +
    "\033\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\212\001\001" +
    "\000\010\033\215\035\217\037\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\215\037\223\001\001\000\002\001\001" +
    "\000\004\036\224\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= INSTRUCTION_OR_FUNCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTION_OR_FUNCTION ::= INSTRUCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OR_FUNCTION",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTION_OR_FUNCTION ::= _FUNCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OR_FUNCTION",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION_OR_FUNCTION ::= INSTRUCTION INSTRUCTION_OR_FUNCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OR_FUNCTION",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION_OR_FUNCTION ::= _FUNCTION INSTRUCTION_OR_FUNCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OR_FUNCTION",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTIONS ::= INSTRUCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= DECLARATION SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= ASSIGNATION SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // _FUNCTION ::= F_BODY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("_FUNCTION",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // _FUNCTION ::= F_HEADER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("_FUNCTION",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // F_PARAMETERS ::= F_PARAMETER MORE_F_PARAMETERS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_PARAMETERS",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // F_PARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_PARAMETERS",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MORE_F_PARAMETERS ::= COMA F_PARAMETER MORE_F_PARAMETERS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_F_PARAMETERS",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MORE_F_PARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_F_PARAMETERS",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // F_PARAMETER ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_PARAMETER",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARATIONS ::= DECLARATIONS DECLARATION SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARATIONS ::= DECLARATION SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATION ::= TYPEDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATION ::= STRUCTDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATION ::= ARRDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASSIGNATION ::= IDENTIFICATOR EQUALS EXP0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPEDEC ::= TYPES IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEC",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TYPEDEC ::= TYPES IDENTIFICATOR EQUALS EXP0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEC",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STRUCTDEC ::= STRUCT IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STRUCTDEC ::= STRUCT IDENTIFICATOR BRACKET_OPEN BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STRUCTDEC ::= STRUCT IDENTIFICATOR BRACKET_OPEN DECLARATIONS BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARRDEC ::= TYPES BRACKET_OPEN NUMBER_NAT BRACKET_CLOSE IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRDEC",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARRDEC ::= TYPES BRACKET_OPEN NUMBER_NAT BRACKET_CLOSE IDENTIFICATOR EQUALS ARRASSIGN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRDEC",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // F_HEADER ::= FUNCTION IDENTIFICATOR PARENTH_OPEN F_PARAMETERS PARENTH_CLOSE TYPE_IDENT TYPES SEMI_COLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_HEADER",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // F_BODY ::= FUNCTION IDENTIFICATOR PARENTH_OPEN F_PARAMETERS PARENTH_CLOSE TYPE_IDENT TYPES CURLY_OPEN INSTRUCTIONS CURLY_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F_BODY",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARRASSIGN ::= CURLY_OPEN ARRCONTENTS CURLY_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRASSIGN",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARRASSIGN ::= RVAL_CHAR_ARR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRASSIGN",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARRCONTENTS ::= ARRCONTENT MORE_ARRCONTENTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENTS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARRCONTENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENTS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MORE_ARRCONTENTS ::= COMA ARRCONTENT MORE_ARRCONTENTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARRCONTENTS",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MORE_ARRCONTENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARRCONTENTS",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARRCONTENT ::= VALUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENT",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARRCONTENT ::= IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRCONTENT",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP0 ::= EXP1 OPERATOR_BAND EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.BAND); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP0 ::= EXP1 OPERATOR_BOR EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.BOR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP0 ::= EXP1 OPERATOR_EQUAL EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.EQUAL); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP0 ::= EXP1 OPERATOR_NEQ EXP0 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.NEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP0 ::= EXP1 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp1; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP1 ::= OPERATOR_BNOT EXP2 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.BNOT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP1 ::= EXP2 
            {
              E RESULT =null;
		E Val_Exp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp2; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP2 ::= EXP3 OPERATOR_GT EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.GT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP2 ::= EXP3 OPERATOR_LT EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.LT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP2 ::= EXP3 OPERATOR_GEQ EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.GEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP2 ::= EXP3 OPERATOR_LEQ EXP2 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.LEQ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP2 ::= EXP3 
            {
              E RESULT =null;
		E Val_Exp3 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp3; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP3 ::= EXP4 OPERATOR_ADD EXP3 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.PLUS); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP3 ::= EXP4 OPERATOR_SUB EXP3 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MINUS); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP3 ::= EXP4 
            {
              E RESULT =null;
		E Val_Exp4 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp4; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP4 ::= EXP5 OPERATOR_MULT EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MULT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP4 ::= EXP5 OPERATOR_DIV EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.DIV); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP4 ::= EXP5 OPERATOR_MOD EXP4 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.MOD); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP4 ::= EXP5 
            {
              E RESULT =null;
		E Val_Exp5 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp5; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP5 ::= EXP6 OPERATOR_AND EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.AND); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP5 ::= EXP6 OPERATOR_OR EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.OR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP5 ::= EXP6 OPERATOR_XOR EXP5 
            {
              E RESULT =null;
		E Val_Exp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E Val_Exp0 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(Val_Exp1, Val_Exp0, BinOps.XOR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP5 ::= OPERATOR_NOT EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.NOT); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP5 ::= EXP6 
            {
              E RESULT =null;
		E Val_Exp6 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp6; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP6 ::= OPERATOR_PP EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.PP_PRE); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP6 ::= OPERATOR_MM EXP6 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EUni(Val_Exp, UniOps.MM_PRE); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP6 ::= EXP7 OPERATOR_PP 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new EUni(Val_Exp, UniOps.PP_POST); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP6 ::= EXP7 OPERATOR_MM 
            {
              E RESULT =null;
		E Val_Exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new EUni(Val_Exp, UniOps.MM_POST); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP6 ::= EXP7 
            {
              E RESULT =null;
		E Val_Exp7 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val_Exp7; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP7 ::= VALUE 
            {
              E RESULT =null;
		Num Val = (Num)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Val; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP7 ::= IDENTIFICATOR 
            {
              E RESULT =null;
		TokenValue Val_ID = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Identificator(Val_ID.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP7 ::= PARENTH_OPEN EXP0 PARENTH_CLOSE 
            {
              E RESULT =null;
		E Val_EXP = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = Val_EXP; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALUE ::= NUMBER_NAT 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.UINT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALUE ::= NUMBER_INT 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.INT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALUE ::= NUMBER_FLOAT 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.FLOAT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALUE ::= NUMBER_BIN 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.UINT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALUE ::= NUMBER_HEX 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.UINT64); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALUE ::= RVAL_CHAR 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.CHAR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALUE ::= RVAL_CHAR_ARR 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.CHAR); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALUE ::= TRUE_ 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.BOOL); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALUE ::= FALSE_ 
            {
              Num RESULT =null;
		TokenValue Val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Num(Val.lexema, Types.BOOL); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TYPES ::= UINT8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TYPES ::= UINT16 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TYPES ::= UINT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TYPES ::= UINT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TYPES ::= INT8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TYPES ::= INT16 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TYPES ::= INT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TYPES ::= INT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPES ::= FLOAT32 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPES ::= FLOAT64 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TYPES ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TYPES ::= UCHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TYPES ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TYPES ::= VOID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

